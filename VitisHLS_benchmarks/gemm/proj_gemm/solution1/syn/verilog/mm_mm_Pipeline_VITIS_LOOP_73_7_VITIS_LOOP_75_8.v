// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mm_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        D_s6_26fixp_address0,
        D_s6_26fixp_ce0,
        D_s6_26fixp_we0,
        D_s6_26fixp_d0,
        D_s6_26fixp_address1,
        D_s6_26fixp_ce1,
        D_s6_26fixp_q1,
        sum_s8_24fixp_14_out,
        sum_s8_24fixp_14_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] D_s6_26fixp_address0;
output   D_s6_26fixp_ce0;
output   D_s6_26fixp_we0;
output  [29:0] D_s6_26fixp_d0;
output  [9:0] D_s6_26fixp_address1;
output   D_s6_26fixp_ce1;
input  [29:0] D_s6_26fixp_q1;
output  [31:0] sum_s8_24fixp_14_out;
output   sum_s8_24fixp_14_out_ap_vld;

reg ap_idle;
reg D_s6_26fixp_ce0;
reg D_s6_26fixp_we0;
reg D_s6_26fixp_ce1;
reg sum_s8_24fixp_14_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] exitcond_flatten11_fu_123_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [9:0] D_s6_26fixp_addr_reg_322;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] p_cast5_fu_191_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] sum_s8_24fixp_14_fu_60;
wire   [31:0] add132_s8_24fixp_fu_275_p2;
wire    ap_loop_init;
reg   [5:0] indvars_iv16_fu_64;
wire   [5:0] indvars_iv_next17_fu_196_p2;
reg   [5:0] ap_sig_allocacmp_indvars_iv16_load;
reg   [5:0] indvars_iv20_fu_68;
wire   [5:0] p_mid28_v_v_fu_161_p3;
reg   [5:0] ap_sig_allocacmp_indvars_iv20_load;
reg   [10:0] indvar_flatten9_fu_72;
wire   [10:0] indvar_flatten_next10_fu_129_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten9_load;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] exitcond19217_fu_141_p2;
wire   [5:0] indvars_iv_next21_dup15_fu_155_p2;
wire   [4:0] empty_8_fu_169_p1;
wire   [5:0] indvars_iv16_mid2_fu_147_p3;
wire   [9:0] indvars_iv16_cast_fu_181_p1;
wire   [9:0] p_mid_fu_173_p3;
wire   [9:0] empty_9_fu_185_p2;
wire   [28:0] empty_10_fu_220_p1;
wire   [58:0] p_shl1_fu_232_p3;
wire   [59:0] p_shl_fu_224_p3;
wire   [59:0] p_shl1_cast_fu_240_p1;
wire   [59:0] empty_11_fu_244_p2;
wire   [27:0] mul110_u4_28fixp_fu_261_p4;
wire   [31:0] p_cast6_fu_271_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mm_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((exitcond_flatten11_fu_123_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten9_fu_72 <= indvar_flatten_next10_fu_129_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten9_fu_72 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((exitcond_flatten11_fu_123_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvars_iv16_fu_64 <= indvars_iv_next17_fu_196_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvars_iv16_fu_64 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((exitcond_flatten11_fu_123_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvars_iv20_fu_68 <= p_mid28_v_v_fu_161_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvars_iv20_fu_68 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            sum_s8_24fixp_14_fu_60 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            sum_s8_24fixp_14_fu_60 <= add132_s8_24fixp_fu_275_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten11_fu_123_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        D_s6_26fixp_addr_reg_322 <= p_cast5_fu_191_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        D_s6_26fixp_ce0 = 1'b1;
    end else begin
        D_s6_26fixp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        D_s6_26fixp_ce1 = 1'b1;
    end else begin
        D_s6_26fixp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        D_s6_26fixp_we0 = 1'b1;
    end else begin
        D_s6_26fixp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten11_fu_123_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten9_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten9_load = indvar_flatten9_fu_72;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvars_iv16_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvars_iv16_load = indvars_iv16_fu_64;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvars_iv20_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvars_iv20_load = indvars_iv20_fu_68;
    end
end

always @ (*) begin
    if (((exitcond_flatten11_fu_123_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_s8_24fixp_14_out_ap_vld = 1'b1;
    end else begin
        sum_s8_24fixp_14_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign D_s6_26fixp_address0 = D_s6_26fixp_addr_reg_322;

assign D_s6_26fixp_address1 = p_cast5_fu_191_p1;

assign D_s6_26fixp_d0 = {{empty_11_fu_244_p2[59:30]}};

assign add132_s8_24fixp_fu_275_p2 = (p_cast6_fu_271_p1 + sum_s8_24fixp_14_fu_60);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_10_fu_220_p1 = D_s6_26fixp_q1[28:0];

assign empty_11_fu_244_p2 = (p_shl_fu_224_p3 - p_shl1_cast_fu_240_p1);

assign empty_8_fu_169_p1 = p_mid28_v_v_fu_161_p3[4:0];

assign empty_9_fu_185_p2 = (indvars_iv16_cast_fu_181_p1 + p_mid_fu_173_p3);

assign exitcond19217_fu_141_p2 = ((ap_sig_allocacmp_indvars_iv16_load == 6'd32) ? 1'b1 : 1'b0);

assign exitcond_flatten11_fu_123_p2 = ((ap_sig_allocacmp_indvar_flatten9_load == 11'd1024) ? 1'b1 : 1'b0);

assign indvar_flatten_next10_fu_129_p2 = (ap_sig_allocacmp_indvar_flatten9_load + 11'd1);

assign indvars_iv16_cast_fu_181_p1 = indvars_iv16_mid2_fu_147_p3;

assign indvars_iv16_mid2_fu_147_p3 = ((exitcond19217_fu_141_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_indvars_iv16_load);

assign indvars_iv_next17_fu_196_p2 = (indvars_iv16_mid2_fu_147_p3 + 6'd1);

assign indvars_iv_next21_dup15_fu_155_p2 = (ap_sig_allocacmp_indvars_iv20_load + 6'd1);

assign mul110_u4_28fixp_fu_261_p4 = {{empty_11_fu_244_p2[59:32]}};

assign p_cast5_fu_191_p1 = empty_9_fu_185_p2;

assign p_cast6_fu_271_p1 = mul110_u4_28fixp_fu_261_p4;

assign p_mid28_v_v_fu_161_p3 = ((exitcond19217_fu_141_p2[0:0] == 1'b1) ? indvars_iv_next21_dup15_fu_155_p2 : ap_sig_allocacmp_indvars_iv20_load);

assign p_mid_fu_173_p3 = {{empty_8_fu_169_p1}, {5'd0}};

assign p_shl1_cast_fu_240_p1 = p_shl1_fu_232_p3;

assign p_shl1_fu_232_p3 = {{D_s6_26fixp_q1}, {29'd0}};

assign p_shl_fu_224_p3 = {{empty_10_fu_220_p1}, {31'd0}};

assign sum_s8_24fixp_14_out = sum_s8_24fixp_14_fu_60;

endmodule //mm_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8
