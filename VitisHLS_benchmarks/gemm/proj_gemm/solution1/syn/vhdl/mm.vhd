-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    gamma : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mm_mm,hls_ip_2022_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7v585t-ffg1761-2,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.547000,HLS_SYN_LAT=2060,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=296,HLS_SYN_LUT=730,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4B800000 : STD_LOGIC_VECTOR (31 downto 0) := "01001011100000000000000000000000";
    constant ap_const_lv32_33800000 : STD_LOGIC_VECTOR (31 downto 0) := "00110011100000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_64_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal mul139_s8_24fixp_reg_121 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_75_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal D_s6_26fixp_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal D_s6_26fixp_ce0 : STD_LOGIC;
    signal D_s6_26fixp_we0 : STD_LOGIC;
    signal D_s6_26fixp_d0 : STD_LOGIC_VECTOR (29 downto 0);
    signal D_s6_26fixp_ce1 : STD_LOGIC;
    signal D_s6_26fixp_q1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_start : STD_LOGIC;
    signal grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_done : STD_LOGIC;
    signal grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_idle : STD_LOGIC;
    signal grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_ready : STD_LOGIC;
    signal grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_D_s6_26fixp_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_D_s6_26fixp_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_D_s6_26fixp_we0 : STD_LOGIC;
    signal grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_D_s6_26fixp_d0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_start : STD_LOGIC;
    signal grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_done : STD_LOGIC;
    signal grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_idle : STD_LOGIC;
    signal grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_ready : STD_LOGIC;
    signal grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_ce0 : STD_LOGIC;
    signal grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_we0 : STD_LOGIC;
    signal grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_d0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_ce1 : STD_LOGIC;
    signal grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_sum_s8_24fixp_14_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_sum_s8_24fixp_14_out_ap_vld : STD_LOGIC;
    signal grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_64_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_64_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_71_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_14_fu_89_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_64_ce : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_71_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mm_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        D_s6_26fixp_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        D_s6_26fixp_ce0 : OUT STD_LOGIC;
        D_s6_26fixp_we0 : OUT STD_LOGIC;
        D_s6_26fixp_d0 : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component mm_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        D_s6_26fixp_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        D_s6_26fixp_ce0 : OUT STD_LOGIC;
        D_s6_26fixp_we0 : OUT STD_LOGIC;
        D_s6_26fixp_d0 : OUT STD_LOGIC_VECTOR (29 downto 0);
        D_s6_26fixp_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        D_s6_26fixp_ce1 : OUT STD_LOGIC;
        D_s6_26fixp_q1 : IN STD_LOGIC_VECTOR (29 downto 0);
        sum_s8_24fixp_14_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_s8_24fixp_14_out_ap_vld : OUT STD_LOGIC );
    end component;


    component mm_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mm_fptosi_32ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mm_sitofp_32ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mm_mul_32s_32s_56_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component mm_D_s6_26fixp_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (29 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    D_s6_26fixp_U : component mm_D_s6_26fixp_RAM_AUTO_1R1W
    generic map (
        DataWidth => 30,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => D_s6_26fixp_address0,
        ce0 => D_s6_26fixp_ce0,
        we0 => D_s6_26fixp_we0,
        d0 => D_s6_26fixp_d0,
        address1 => grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_address1,
        ce1 => D_s6_26fixp_ce1,
        q1 => D_s6_26fixp_q1);

    grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52 : component mm_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_start,
        ap_done => grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_done,
        ap_idle => grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_idle,
        ap_ready => grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_ready,
        D_s6_26fixp_address0 => grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_D_s6_26fixp_address0,
        D_s6_26fixp_ce0 => grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_D_s6_26fixp_ce0,
        D_s6_26fixp_we0 => grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_D_s6_26fixp_we0,
        D_s6_26fixp_d0 => grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_D_s6_26fixp_d0);

    grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58 : component mm_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_start,
        ap_done => grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_done,
        ap_idle => grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_idle,
        ap_ready => grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_ready,
        D_s6_26fixp_address0 => grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_address0,
        D_s6_26fixp_ce0 => grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_ce0,
        D_s6_26fixp_we0 => grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_we0,
        D_s6_26fixp_d0 => grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_d0,
        D_s6_26fixp_address1 => grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_address1,
        D_s6_26fixp_ce1 => grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_ce1,
        D_s6_26fixp_q1 => D_s6_26fixp_q1,
        sum_s8_24fixp_14_out => grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_sum_s8_24fixp_14_out,
        sum_s8_24fixp_14_out_ap_vld => grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_sum_s8_24fixp_14_out_ap_vld);

    fmul_32ns_32ns_32_2_max_dsp_1_U4 : component mm_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_64_p0,
        din1 => grp_fu_64_p1,
        ce => grp_fu_64_ce,
        dout => grp_fu_64_p2);

    fptosi_32ns_32_2_no_dsp_1_U5 : component mm_fptosi_32ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_64_p2,
        ce => grp_fu_71_ce,
        dout => grp_fu_71_p1);

    sitofp_32ns_32_2_no_dsp_1_U6 : component mm_sitofp_32ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul139_s8_24fixp_reg_121,
        ce => ap_const_logic_1,
        dout => grp_fu_75_p1);

    mul_32s_32s_56_1_1_U7 : component mm_mul_32s_32s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 56)
    port map (
        din0 => grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_sum_s8_24fixp_14_out,
        din1 => grp_fu_71_p1,
        dout => empty_14_fu_89_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_ready = ap_const_logic_1)) then 
                    grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_ready = ap_const_logic_1)) then 
                    grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mul139_s8_24fixp_reg_121 <= empty_14_fu_89_p2(55 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_1_reg_126 <= grp_fu_75_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_done, grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    D_s6_26fixp_address0_assign_proc : process(ap_CS_fsm_state4, grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_D_s6_26fixp_address0, grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            D_s6_26fixp_address0 <= grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            D_s6_26fixp_address0 <= grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_D_s6_26fixp_address0;
        else 
            D_s6_26fixp_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    D_s6_26fixp_ce0_assign_proc : process(ap_CS_fsm_state4, grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_D_s6_26fixp_ce0, grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            D_s6_26fixp_ce0 <= grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            D_s6_26fixp_ce0 <= grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_D_s6_26fixp_ce0;
        else 
            D_s6_26fixp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    D_s6_26fixp_ce1_assign_proc : process(ap_CS_fsm_state4, grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            D_s6_26fixp_ce1 <= grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_ce1;
        else 
            D_s6_26fixp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    D_s6_26fixp_d0_assign_proc : process(ap_CS_fsm_state4, grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_D_s6_26fixp_d0, grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_d0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            D_s6_26fixp_d0 <= grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            D_s6_26fixp_d0 <= grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_D_s6_26fixp_d0;
        else 
            D_s6_26fixp_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    D_s6_26fixp_we0_assign_proc : process(ap_CS_fsm_state4, grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_D_s6_26fixp_we0, grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            D_s6_26fixp_we0 <= grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_D_s6_26fixp_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            D_s6_26fixp_we0 <= grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_D_s6_26fixp_we0;
        else 
            D_s6_26fixp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_done)
    begin
        if ((grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_done)
    begin
        if ((grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_fu_64_p2;

    grp_fu_64_ce_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            grp_fu_64_ce <= ap_const_logic_1;
        else 
            grp_fu_64_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_64_p0_assign_proc : process(gamma, ap_CS_fsm_state3, tmp_1_reg_126, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_64_p0 <= tmp_1_reg_126;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_64_p0 <= gamma;
        else 
            grp_fu_64_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_64_p1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_64_p1 <= ap_const_lv32_33800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_64_p1 <= ap_const_lv32_4B800000;
        else 
            grp_fu_64_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_71_ce_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            grp_fu_71_ce <= ap_const_logic_1;
        else 
            grp_fu_71_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_start <= grp_mm_Pipeline_VITIS_LOOP_60_5_VITIS_LOOP_61_6_fu_52_ap_start_reg;
    grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_start <= grp_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8_fu_58_ap_start_reg;
end behav;
