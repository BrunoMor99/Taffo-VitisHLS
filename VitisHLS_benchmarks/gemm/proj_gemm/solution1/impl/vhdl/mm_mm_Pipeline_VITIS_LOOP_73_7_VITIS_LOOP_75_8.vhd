-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mm_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    D_s6_26fixp_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    D_s6_26fixp_ce0 : OUT STD_LOGIC;
    D_s6_26fixp_we0 : OUT STD_LOGIC;
    D_s6_26fixp_d0 : OUT STD_LOGIC_VECTOR (29 downto 0);
    D_s6_26fixp_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    D_s6_26fixp_ce1 : OUT STD_LOGIC;
    D_s6_26fixp_q1 : IN STD_LOGIC_VECTOR (29 downto 0);
    sum_s8_24fixp_14_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_s8_24fixp_14_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of mm_mm_Pipeline_VITIS_LOOP_73_7_VITIS_LOOP_75_8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exitcond_flatten11_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal D_s6_26fixp_addr_reg_322 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_cast5_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal sum_s8_24fixp_14_fu_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal add132_s8_24fixp_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal indvars_iv16_fu_64 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvars_iv_next17_fu_196_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvars_iv16_load : STD_LOGIC_VECTOR (5 downto 0);
    signal indvars_iv20_fu_68 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid28_v_v_fu_161_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvars_iv20_load : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten9_fu_72 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_next10_fu_129_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten9_load : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal exitcond19217_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next21_dup15_fu_155_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_8_fu_169_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv16_mid2_fu_147_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvars_iv16_cast_fu_181_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_mid_fu_173_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_9_fu_185_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_10_fu_220_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_shl1_fu_232_p3 : STD_LOGIC_VECTOR (58 downto 0);
    signal p_shl_fu_224_p3 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_shl1_cast_fu_240_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal empty_11_fu_244_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal mul110_u4_28fixp_fu_261_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_cast6_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component mm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten9_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((exitcond_flatten11_fu_123_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten9_fu_72 <= indvar_flatten_next10_fu_129_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten9_fu_72 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    indvars_iv16_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((exitcond_flatten11_fu_123_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvars_iv16_fu_64 <= indvars_iv_next17_fu_196_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvars_iv16_fu_64 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    indvars_iv20_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((exitcond_flatten11_fu_123_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvars_iv20_fu_68 <= p_mid28_v_v_fu_161_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvars_iv20_fu_68 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    sum_s8_24fixp_14_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    sum_s8_24fixp_14_fu_60 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    sum_s8_24fixp_14_fu_60 <= add132_s8_24fixp_fu_275_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten11_fu_123_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                D_s6_26fixp_addr_reg_322 <= p_cast5_fu_191_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    D_s6_26fixp_address0 <= D_s6_26fixp_addr_reg_322;
    D_s6_26fixp_address1 <= p_cast5_fu_191_p1(10 - 1 downto 0);

    D_s6_26fixp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            D_s6_26fixp_ce0 <= ap_const_logic_1;
        else 
            D_s6_26fixp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    D_s6_26fixp_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            D_s6_26fixp_ce1 <= ap_const_logic_1;
        else 
            D_s6_26fixp_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    D_s6_26fixp_d0 <= empty_11_fu_244_p2(59 downto 30);

    D_s6_26fixp_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            D_s6_26fixp_we0 <= ap_const_logic_1;
        else 
            D_s6_26fixp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add132_s8_24fixp_fu_275_p2 <= std_logic_vector(unsigned(p_cast6_fu_271_p1) + unsigned(sum_s8_24fixp_14_fu_60));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, exitcond_flatten11_fu_123_p2)
    begin
        if (((exitcond_flatten11_fu_123_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten9_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten9_fu_72)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten9_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten9_load <= indvar_flatten9_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_indvars_iv16_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvars_iv16_fu_64)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvars_iv16_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvars_iv16_load <= indvars_iv16_fu_64;
        end if; 
    end process;


    ap_sig_allocacmp_indvars_iv20_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvars_iv20_fu_68)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvars_iv20_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvars_iv20_load <= indvars_iv20_fu_68;
        end if; 
    end process;

    empty_10_fu_220_p1 <= D_s6_26fixp_q1(29 - 1 downto 0);
    empty_11_fu_244_p2 <= std_logic_vector(unsigned(p_shl_fu_224_p3) - unsigned(p_shl1_cast_fu_240_p1));
    empty_8_fu_169_p1 <= p_mid28_v_v_fu_161_p3(5 - 1 downto 0);
    empty_9_fu_185_p2 <= std_logic_vector(unsigned(indvars_iv16_cast_fu_181_p1) + unsigned(p_mid_fu_173_p3));
    exitcond19217_fu_141_p2 <= "1" when (ap_sig_allocacmp_indvars_iv16_load = ap_const_lv6_20) else "0";
    exitcond_flatten11_fu_123_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten9_load = ap_const_lv11_400) else "0";
    indvar_flatten_next10_fu_129_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten9_load) + unsigned(ap_const_lv11_1));
    indvars_iv16_cast_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv16_mid2_fu_147_p3),10));
    indvars_iv16_mid2_fu_147_p3 <= 
        ap_const_lv6_0 when (exitcond19217_fu_141_p2(0) = '1') else 
        ap_sig_allocacmp_indvars_iv16_load;
    indvars_iv_next17_fu_196_p2 <= std_logic_vector(unsigned(indvars_iv16_mid2_fu_147_p3) + unsigned(ap_const_lv6_1));
    indvars_iv_next21_dup15_fu_155_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvars_iv20_load) + unsigned(ap_const_lv6_1));
    mul110_u4_28fixp_fu_261_p4 <= empty_11_fu_244_p2(59 downto 32);
    p_cast5_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_9_fu_185_p2),64));
    p_cast6_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul110_u4_28fixp_fu_261_p4),32));
    p_mid28_v_v_fu_161_p3 <= 
        indvars_iv_next21_dup15_fu_155_p2 when (exitcond19217_fu_141_p2(0) = '1') else 
        ap_sig_allocacmp_indvars_iv20_load;
    p_mid_fu_173_p3 <= (empty_8_fu_169_p1 & ap_const_lv5_0);
    p_shl1_cast_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_232_p3),60));
    p_shl1_fu_232_p3 <= (D_s6_26fixp_q1 & ap_const_lv29_0);
    p_shl_fu_224_p3 <= (empty_10_fu_220_p1 & ap_const_lv31_0);
    sum_s8_24fixp_14_out <= sum_s8_24fixp_14_fu_60;

    sum_s8_24fixp_14_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, exitcond_flatten11_fu_123_p2, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten11_fu_123_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sum_s8_24fixp_14_out_ap_vld <= ap_const_logic_1;
        else 
            sum_s8_24fixp_14_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
