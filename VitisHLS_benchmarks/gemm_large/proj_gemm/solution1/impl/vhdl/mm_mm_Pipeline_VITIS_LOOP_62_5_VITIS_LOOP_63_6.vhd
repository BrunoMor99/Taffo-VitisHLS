-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mm_mm_Pipeline_VITIS_LOOP_62_5_VITIS_LOOP_63_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    D_s9_23fixp_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    D_s9_23fixp_0_ce0 : OUT STD_LOGIC;
    D_s9_23fixp_0_we0 : OUT STD_LOGIC;
    D_s9_23fixp_0_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    D_s9_23fixp_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    D_s9_23fixp_1_ce0 : OUT STD_LOGIC;
    D_s9_23fixp_1_we0 : OUT STD_LOGIC;
    D_s9_23fixp_1_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    D_s9_23fixp_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    D_s9_23fixp_2_ce0 : OUT STD_LOGIC;
    D_s9_23fixp_2_we0 : OUT STD_LOGIC;
    D_s9_23fixp_2_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    D_s9_23fixp_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    D_s9_23fixp_3_ce0 : OUT STD_LOGIC;
    D_s9_23fixp_3_we0 : OUT STD_LOGIC;
    D_s9_23fixp_3_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    D_s9_23fixp_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    D_s9_23fixp_4_ce0 : OUT STD_LOGIC;
    D_s9_23fixp_4_we0 : OUT STD_LOGIC;
    D_s9_23fixp_4_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    D_s9_23fixp_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    D_s9_23fixp_5_ce0 : OUT STD_LOGIC;
    D_s9_23fixp_5_we0 : OUT STD_LOGIC;
    D_s9_23fixp_5_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    D_s9_23fixp_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    D_s9_23fixp_6_ce0 : OUT STD_LOGIC;
    D_s9_23fixp_6_we0 : OUT STD_LOGIC;
    D_s9_23fixp_6_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    D_s9_23fixp_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    D_s9_23fixp_7_ce0 : OUT STD_LOGIC;
    D_s9_23fixp_7_we0 : OUT STD_LOGIC;
    D_s9_23fixp_7_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    D_s9_23fixp_8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    D_s9_23fixp_8_ce0 : OUT STD_LOGIC;
    D_s9_23fixp_8_we0 : OUT STD_LOGIC;
    D_s9_23fixp_8_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    D_s9_23fixp_9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    D_s9_23fixp_9_ce0 : OUT STD_LOGIC;
    D_s9_23fixp_9_we0 : OUT STD_LOGIC;
    D_s9_23fixp_9_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    D_s9_23fixp_10_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    D_s9_23fixp_10_ce0 : OUT STD_LOGIC;
    D_s9_23fixp_10_we0 : OUT STD_LOGIC;
    D_s9_23fixp_10_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    D_s9_23fixp_11_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    D_s9_23fixp_11_ce0 : OUT STD_LOGIC;
    D_s9_23fixp_11_we0 : OUT STD_LOGIC;
    D_s9_23fixp_11_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    D_s9_23fixp_12_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    D_s9_23fixp_12_ce0 : OUT STD_LOGIC;
    D_s9_23fixp_12_we0 : OUT STD_LOGIC;
    D_s9_23fixp_12_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    D_s9_23fixp_13_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    D_s9_23fixp_13_ce0 : OUT STD_LOGIC;
    D_s9_23fixp_13_we0 : OUT STD_LOGIC;
    D_s9_23fixp_13_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    D_s9_23fixp_14_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    D_s9_23fixp_14_ce0 : OUT STD_LOGIC;
    D_s9_23fixp_14_we0 : OUT STD_LOGIC;
    D_s9_23fixp_14_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    D_s9_23fixp_15_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    D_s9_23fixp_15_ce0 : OUT STD_LOGIC;
    D_s9_23fixp_15_we0 : OUT STD_LOGIC;
    D_s9_23fixp_15_d0 : OUT STD_LOGIC_VECTOR (30 downto 0);
    grp_fu_223_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_223_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_223_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_223_p_ce : OUT STD_LOGIC;
    grp_fu_230_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_230_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_230_p_ce : OUT STD_LOGIC );
end;


architecture behav of mm_mm_Pipeline_VITIS_LOOP_62_5_VITIS_LOOP_63_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_40A00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000101000000000000000000000";
    constant ap_const_lv32_3D800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111101100000000000000000000000";
    constant ap_const_lv32_4B000000 : STD_LOGIC_VECTOR (31 downto 0) := "01001011000000000000000000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exitcond_flatten_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvars_iv98_cast582_mid2_v_fu_400_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv98_cast582_mid2_v_reg_518 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv98_cast582_mid2_v_reg_518_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv98_cast582_mid2_v_reg_518_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv98_cast582_mid2_v_reg_518_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv98_cast582_mid2_v_reg_518_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv98_cast582_mid2_v_reg_518_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv98_cast582_mid2_v_reg_518_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv98_cast582_mid2_v_reg_518_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_585_fu_412_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_585_reg_523 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_585_reg_523_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_585_reg_523_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_585_reg_523_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_585_reg_523_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_585_reg_523_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_585_reg_523_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_585_reg_523_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_reg_542 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv98_cast582_mid2_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal indvars_iv92_fu_102 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_next93_fu_433_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_indvars_iv92_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv98_fu_106 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_indvars_iv98_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_110 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_next_fu_368_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_589_fu_473_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_341_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond971320_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next99_dup18_fu_394_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv92_mid2_fu_386_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_587_fu_422_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_587_fu_422_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_587_fu_422_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mm_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mm_fptosi_32ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mm_sitofp_32ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mm_mul_4s_4s_4_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component mm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fmul_32ns_32ns_32_2_max_dsp_1_U2 : component mm_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_537,
        din1 => ap_const_lv32_3D800000,
        ce => ap_const_logic_1,
        dout => grp_fu_327_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U3 : component mm_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => div_reg_542,
        din1 => ap_const_lv32_4B000000,
        ce => ap_const_logic_1,
        dout => grp_fu_332_p2);

    sitofp_32ns_32_2_no_dsp_1_U5 : component mm_sitofp_32ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_341_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_341_p1);

    mul_4s_4s_4_1_1_U6 : component mm_mul_4s_4s_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        din0 => empty_587_fu_422_p0,
        din1 => empty_587_fu_422_p1,
        dout => empty_587_fu_422_p2);

    flow_control_loop_pipe_sequential_init_U : component mm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((exitcond_flatten_fu_362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_110 <= indvar_flatten_next_fu_368_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_110 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    indvars_iv92_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((exitcond_flatten_fu_362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvars_iv92_fu_102 <= indvars_iv_next93_fu_433_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvars_iv92_fu_102 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    indvars_iv98_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((exitcond_flatten_fu_362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvars_iv98_fu_106 <= indvars_iv98_cast582_mid2_v_fu_400_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvars_iv98_fu_106 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                conv_reg_532 <= grp_fu_341_p1;
                empty_585_reg_523_pp0_iter1_reg <= empty_585_reg_523;
                indvars_iv98_cast582_mid2_v_reg_518_pp0_iter1_reg <= indvars_iv98_cast582_mid2_v_reg_518;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                div_reg_542 <= grp_fu_327_p2;
                empty_585_reg_523_pp0_iter2_reg <= empty_585_reg_523_pp0_iter1_reg;
                empty_585_reg_523_pp0_iter3_reg <= empty_585_reg_523_pp0_iter2_reg;
                empty_585_reg_523_pp0_iter4_reg <= empty_585_reg_523_pp0_iter3_reg;
                empty_585_reg_523_pp0_iter5_reg <= empty_585_reg_523_pp0_iter4_reg;
                empty_585_reg_523_pp0_iter6_reg <= empty_585_reg_523_pp0_iter5_reg;
                empty_585_reg_523_pp0_iter7_reg <= empty_585_reg_523_pp0_iter6_reg;
                indvars_iv98_cast582_mid2_v_reg_518_pp0_iter2_reg <= indvars_iv98_cast582_mid2_v_reg_518_pp0_iter1_reg;
                indvars_iv98_cast582_mid2_v_reg_518_pp0_iter3_reg <= indvars_iv98_cast582_mid2_v_reg_518_pp0_iter2_reg;
                indvars_iv98_cast582_mid2_v_reg_518_pp0_iter4_reg <= indvars_iv98_cast582_mid2_v_reg_518_pp0_iter3_reg;
                indvars_iv98_cast582_mid2_v_reg_518_pp0_iter5_reg <= indvars_iv98_cast582_mid2_v_reg_518_pp0_iter4_reg;
                indvars_iv98_cast582_mid2_v_reg_518_pp0_iter6_reg <= indvars_iv98_cast582_mid2_v_reg_518_pp0_iter5_reg;
                indvars_iv98_cast582_mid2_v_reg_518_pp0_iter7_reg <= indvars_iv98_cast582_mid2_v_reg_518_pp0_iter6_reg;
                mul_reg_537 <= grp_fu_223_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_362_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_585_reg_523 <= empty_585_fu_412_p1;
                indvars_iv98_cast582_mid2_v_reg_518 <= indvars_iv98_cast582_mid2_v_fu_400_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    D_s9_23fixp_0_address0 <= indvars_iv98_cast582_mid2_fu_454_p1(4 - 1 downto 0);

    D_s9_23fixp_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            D_s9_23fixp_0_ce0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_0_d0 <= empty_589_fu_473_p1;

    D_s9_23fixp_0_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, empty_585_reg_523_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_585_reg_523_pp0_iter7_reg = ap_const_lv4_0))) then 
            D_s9_23fixp_0_we0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_10_address0 <= indvars_iv98_cast582_mid2_fu_454_p1(4 - 1 downto 0);

    D_s9_23fixp_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            D_s9_23fixp_10_ce0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_10_d0 <= empty_589_fu_473_p1;

    D_s9_23fixp_10_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, empty_585_reg_523_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_585_reg_523_pp0_iter7_reg = ap_const_lv4_A))) then 
            D_s9_23fixp_10_we0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_11_address0 <= indvars_iv98_cast582_mid2_fu_454_p1(4 - 1 downto 0);

    D_s9_23fixp_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            D_s9_23fixp_11_ce0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_11_d0 <= empty_589_fu_473_p1;

    D_s9_23fixp_11_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, empty_585_reg_523_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_585_reg_523_pp0_iter7_reg = ap_const_lv4_B))) then 
            D_s9_23fixp_11_we0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_12_address0 <= indvars_iv98_cast582_mid2_fu_454_p1(4 - 1 downto 0);

    D_s9_23fixp_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            D_s9_23fixp_12_ce0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_12_d0 <= empty_589_fu_473_p1;

    D_s9_23fixp_12_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, empty_585_reg_523_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_585_reg_523_pp0_iter7_reg = ap_const_lv4_C))) then 
            D_s9_23fixp_12_we0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_13_address0 <= indvars_iv98_cast582_mid2_fu_454_p1(4 - 1 downto 0);

    D_s9_23fixp_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            D_s9_23fixp_13_ce0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_13_d0 <= empty_589_fu_473_p1;

    D_s9_23fixp_13_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, empty_585_reg_523_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_585_reg_523_pp0_iter7_reg = ap_const_lv4_D))) then 
            D_s9_23fixp_13_we0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_14_address0 <= indvars_iv98_cast582_mid2_fu_454_p1(4 - 1 downto 0);

    D_s9_23fixp_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            D_s9_23fixp_14_ce0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_14_d0 <= empty_589_fu_473_p1;

    D_s9_23fixp_14_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, empty_585_reg_523_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_585_reg_523_pp0_iter7_reg = ap_const_lv4_E))) then 
            D_s9_23fixp_14_we0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_15_address0 <= indvars_iv98_cast582_mid2_fu_454_p1(4 - 1 downto 0);

    D_s9_23fixp_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            D_s9_23fixp_15_ce0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_15_d0 <= empty_589_fu_473_p1;

    D_s9_23fixp_15_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, empty_585_reg_523_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_585_reg_523_pp0_iter7_reg = ap_const_lv4_F))) then 
            D_s9_23fixp_15_we0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_1_address0 <= indvars_iv98_cast582_mid2_fu_454_p1(4 - 1 downto 0);

    D_s9_23fixp_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            D_s9_23fixp_1_ce0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_1_d0 <= empty_589_fu_473_p1;

    D_s9_23fixp_1_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, empty_585_reg_523_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_585_reg_523_pp0_iter7_reg = ap_const_lv4_1))) then 
            D_s9_23fixp_1_we0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_2_address0 <= indvars_iv98_cast582_mid2_fu_454_p1(4 - 1 downto 0);

    D_s9_23fixp_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            D_s9_23fixp_2_ce0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_2_d0 <= empty_589_fu_473_p1;

    D_s9_23fixp_2_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, empty_585_reg_523_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_585_reg_523_pp0_iter7_reg = ap_const_lv4_2))) then 
            D_s9_23fixp_2_we0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_3_address0 <= indvars_iv98_cast582_mid2_fu_454_p1(4 - 1 downto 0);

    D_s9_23fixp_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            D_s9_23fixp_3_ce0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_3_d0 <= empty_589_fu_473_p1;

    D_s9_23fixp_3_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, empty_585_reg_523_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_585_reg_523_pp0_iter7_reg = ap_const_lv4_3))) then 
            D_s9_23fixp_3_we0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_4_address0 <= indvars_iv98_cast582_mid2_fu_454_p1(4 - 1 downto 0);

    D_s9_23fixp_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            D_s9_23fixp_4_ce0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_4_d0 <= empty_589_fu_473_p1;

    D_s9_23fixp_4_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, empty_585_reg_523_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_585_reg_523_pp0_iter7_reg = ap_const_lv4_4))) then 
            D_s9_23fixp_4_we0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_5_address0 <= indvars_iv98_cast582_mid2_fu_454_p1(4 - 1 downto 0);

    D_s9_23fixp_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            D_s9_23fixp_5_ce0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_5_d0 <= empty_589_fu_473_p1;

    D_s9_23fixp_5_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, empty_585_reg_523_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_585_reg_523_pp0_iter7_reg = ap_const_lv4_5))) then 
            D_s9_23fixp_5_we0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_6_address0 <= indvars_iv98_cast582_mid2_fu_454_p1(4 - 1 downto 0);

    D_s9_23fixp_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            D_s9_23fixp_6_ce0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_6_d0 <= empty_589_fu_473_p1;

    D_s9_23fixp_6_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, empty_585_reg_523_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_585_reg_523_pp0_iter7_reg = ap_const_lv4_6))) then 
            D_s9_23fixp_6_we0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_7_address0 <= indvars_iv98_cast582_mid2_fu_454_p1(4 - 1 downto 0);

    D_s9_23fixp_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            D_s9_23fixp_7_ce0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_7_d0 <= empty_589_fu_473_p1;

    D_s9_23fixp_7_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, empty_585_reg_523_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_585_reg_523_pp0_iter7_reg = ap_const_lv4_7))) then 
            D_s9_23fixp_7_we0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_8_address0 <= indvars_iv98_cast582_mid2_fu_454_p1(4 - 1 downto 0);

    D_s9_23fixp_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            D_s9_23fixp_8_ce0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_8_d0 <= empty_589_fu_473_p1;

    D_s9_23fixp_8_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, empty_585_reg_523_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_585_reg_523_pp0_iter7_reg = ap_const_lv4_8))) then 
            D_s9_23fixp_8_we0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_9_address0 <= indvars_iv98_cast582_mid2_fu_454_p1(4 - 1 downto 0);

    D_s9_23fixp_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            D_s9_23fixp_9_ce0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_s9_23fixp_9_d0 <= empty_589_fu_473_p1;

    D_s9_23fixp_9_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, empty_585_reg_523_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_585_reg_523_pp0_iter7_reg = ap_const_lv4_9))) then 
            D_s9_23fixp_9_we0 <= ap_const_logic_1;
        else 
            D_s9_23fixp_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, exitcond_flatten_fu_362_p2)
    begin
        if (((exitcond_flatten_fu_362_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_110)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_110;
        end if; 
    end process;


    ap_sig_allocacmp_indvars_iv92_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, indvars_iv92_fu_102, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvars_iv92_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvars_iv92_load <= indvars_iv92_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_indvars_iv98_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvars_iv98_fu_106)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvars_iv98_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvars_iv98_load <= indvars_iv98_fu_106;
        end if; 
    end process;

    empty_585_fu_412_p1 <= indvars_iv92_mid2_fu_386_p3(4 - 1 downto 0);
    empty_587_fu_422_p0 <= std_logic_vector(unsigned(empty_585_fu_412_p1) + unsigned(ap_const_lv4_2));
    empty_587_fu_422_p1 <= indvars_iv98_cast582_mid2_v_fu_400_p3(4 - 1 downto 0);
    empty_589_fu_473_p1 <= grp_fu_230_p_dout0(31 - 1 downto 0);
    exitcond971320_fu_380_p2 <= "1" when (ap_sig_allocacmp_indvars_iv92_load = ap_const_lv5_10) else "0";
    exitcond_flatten_fu_362_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv9_100) else "0";
    grp_fu_223_p_ce <= ap_const_logic_1;
    grp_fu_223_p_din0 <= conv_reg_532;
    grp_fu_223_p_din1 <= ap_const_lv32_40A00000;
    grp_fu_230_p_ce <= ap_const_logic_1;
    grp_fu_230_p_din0 <= grp_fu_332_p2;
    grp_fu_341_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_587_fu_422_p2),32));
    indvar_flatten_next_fu_368_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv9_1));
    indvars_iv92_mid2_fu_386_p3 <= 
        ap_const_lv5_0 when (exitcond971320_fu_380_p2(0) = '1') else 
        ap_sig_allocacmp_indvars_iv92_load;
    indvars_iv98_cast582_mid2_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv98_cast582_mid2_v_reg_518_pp0_iter7_reg),64));
    indvars_iv98_cast582_mid2_v_fu_400_p3 <= 
        indvars_iv_next99_dup18_fu_394_p2 when (exitcond971320_fu_380_p2(0) = '1') else 
        ap_sig_allocacmp_indvars_iv98_load;
    indvars_iv_next93_fu_433_p2 <= std_logic_vector(unsigned(indvars_iv92_mid2_fu_386_p3) + unsigned(ap_const_lv5_1));
    indvars_iv_next99_dup18_fu_394_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvars_iv98_load) + unsigned(ap_const_lv5_1));
end behav;
