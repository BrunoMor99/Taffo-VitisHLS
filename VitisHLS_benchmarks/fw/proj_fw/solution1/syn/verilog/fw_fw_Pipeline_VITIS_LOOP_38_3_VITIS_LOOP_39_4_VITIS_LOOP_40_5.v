// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fw_fw_Pipeline_VITIS_LOOP_38_3_VITIS_LOOP_39_4_VITIS_LOOP_40_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        path_s12_20fixp_address0,
        path_s12_20fixp_ce0,
        path_s12_20fixp_we0,
        path_s12_20fixp_d0,
        path_s12_20fixp_q0,
        path_s12_20fixp_address1,
        path_s12_20fixp_ce1,
        path_s12_20fixp_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] path_s12_20fixp_address0;
output   path_s12_20fixp_ce0;
output   path_s12_20fixp_we0;
output  [31:0] path_s12_20fixp_d0;
input  [31:0] path_s12_20fixp_q0;
output  [7:0] path_s12_20fixp_address1;
output   path_s12_20fixp_ce1;
input  [31:0] path_s12_20fixp_q1;

reg ap_idle;
reg[7:0] path_s12_20fixp_address0;
reg path_s12_20fixp_ce0;
reg path_s12_20fixp_we0;
reg path_s12_20fixp_ce1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] exitcond_flatten38_fu_164_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_subdone;
reg   [9:0] indvar_flatten13_load_reg_458;
wire    ap_block_pp0_stage1_11001;
wire   [12:0] indvar_flatten_next37_fu_170_p2;
reg   [12:0] indvar_flatten_next37_reg_466;
wire   [0:0] exitcond_flatten1552_fu_179_p2;
reg   [0:0] exitcond_flatten1552_reg_471;
wire   [4:0] empty_6_fu_199_p3;
reg   [4:0] empty_6_reg_476;
wire   [4:0] indvars_iv_mid2_fu_273_p3;
reg   [4:0] indvars_iv_mid2_reg_481;
wire   [4:0] indvars_iv10_mid2_fu_320_p3;
reg   [4:0] indvars_iv10_mid2_reg_486;
wire   [7:0] empty_11_fu_343_p2;
reg   [7:0] empty_11_reg_501;
reg   [31:0] path_s12_20fixp_load_reg_506;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] path_s12_20fixp_load_1_reg_512;
reg   [7:0] path_s12_20fixp_addr_2_reg_518;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] p_cast6_mid2_cast_fu_315_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] p_cast7_fu_338_p1;
wire   [63:0] p_cast8_fu_349_p1;
wire    ap_block_pp0_stage2;
reg   [4:0] indvars_iv_fu_52;
wire   [4:0] indvars_iv_next_fu_384_p2;
wire    ap_block_pp0_stage0_11001;
wire    ap_loop_init;
reg   [4:0] indvars_iv10_fu_56;
reg   [9:0] indvar_flatten13_fu_60;
wire   [9:0] indvar_flatten_next14_fu_394_p3;
reg   [4:0] indvars_iv15_fu_64;
reg   [12:0] indvar_flatten36_fu_68;
wire   [0:0] empty_12_fu_357_p2;
wire    ap_block_pp0_stage0;
wire   [3:0] empty_fu_146_p1;
wire   [7:0] tmp_5_fu_150_p3;
wire   [7:0] indvars_iv15_cast_fu_142_p1;
wire   [4:0] indvars_iv_next16_dup42_fu_193_p2;
wire   [3:0] empty_7_fu_211_p1;
wire   [7:0] indvars_iv_next16_dup42_cast_fu_231_p1;
wire   [7:0] empty_4_fu_158_p2;
wire   [0:0] exitcond153_fu_249_p2;
wire   [0:0] not_exitcond_flatten15_fu_243_p2;
wire   [4:0] indvars_iv10_mid222_fu_185_p3;
wire   [0:0] exitcond1_mid235_fu_255_p2;
wire   [0:0] empty_8_fu_267_p2;
wire   [4:0] indvars_iv_next11_fu_261_p2;
wire   [3:0] empty_9_fu_281_p1;
wire   [7:0] p_mid1_fu_285_p3;
wire   [7:0] p_mid229_fu_223_p3;
wire   [7:0] indvars_iv15_cast_mid2_fu_207_p1;
wire   [7:0] p_mid111_fu_301_p2;
wire   [7:0] p_cast6_mid233_fu_235_p3;
wire   [7:0] p_cast6_mid2_fu_307_p3;
wire   [7:0] indvars_iv_cast_fu_328_p1;
wire   [7:0] p_mid_fu_215_p3;
wire   [7:0] empty_10_fu_332_p2;
wire   [7:0] p_mid210_fu_293_p3;
wire   [31:0] add61_s12_20fixp_fu_353_p2;
wire   [30:0] empty_13_fu_363_p1;
wire   [30:0] empty_14_fu_370_p1;
wire  signed [31:0] path_s12_20fixp_load_1_cast_cast_fu_373_p1;
wire  signed [31:0] path_s12_20fixp_load_cast_cast_fu_366_p1;
wire   [9:0] indvar_flatten13_op_fu_389_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

fw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_60 <= 10'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            indvar_flatten13_fu_60 <= indvar_flatten_next14_fu_394_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten36_fu_68 <= 13'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            indvar_flatten36_fu_68 <= indvar_flatten_next37_reg_466;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvars_iv10_fu_56 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            indvars_iv10_fu_56 <= indvars_iv10_mid2_reg_486;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvars_iv15_fu_64 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            indvars_iv15_fu_64 <= empty_6_reg_476;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvars_iv_fu_52 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            indvars_iv_fu_52 <= indvars_iv_next_fu_384_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten38_fu_164_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_11_reg_501 <= empty_11_fu_343_p2;
        empty_6_reg_476 <= empty_6_fu_199_p3;
        exitcond_flatten1552_reg_471 <= exitcond_flatten1552_fu_179_p2;
        indvars_iv10_mid2_reg_486 <= indvars_iv10_mid2_fu_320_p3;
        indvars_iv_mid2_reg_481 <= indvars_iv_mid2_fu_273_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvar_flatten13_load_reg_458 <= indvar_flatten13_fu_60;
        indvar_flatten_next37_reg_466 <= indvar_flatten_next37_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        path_s12_20fixp_addr_2_reg_518 <= p_cast8_fu_349_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        path_s12_20fixp_load_1_reg_512 <= path_s12_20fixp_q0;
        path_s12_20fixp_load_reg_506 <= path_s12_20fixp_q1;
    end
end

always @ (*) begin
    if (((exitcond_flatten38_fu_164_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        path_s12_20fixp_address0 = path_s12_20fixp_addr_2_reg_518;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        path_s12_20fixp_address0 = p_cast8_fu_349_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        path_s12_20fixp_address0 = p_cast7_fu_338_p1;
    end else begin
        path_s12_20fixp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        path_s12_20fixp_ce0 = 1'b1;
    end else begin
        path_s12_20fixp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        path_s12_20fixp_ce1 = 1'b1;
    end else begin
        path_s12_20fixp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (empty_12_fu_357_p2 == 1'd0))) begin
        path_s12_20fixp_we0 = 1'b1;
    end else begin
        path_s12_20fixp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add61_s12_20fixp_fu_353_p2 = (path_s12_20fixp_load_1_reg_512 + path_s12_20fixp_load_reg_506);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign empty_10_fu_332_p2 = (indvars_iv_cast_fu_328_p1 + p_mid_fu_215_p3);

assign empty_11_fu_343_p2 = (indvars_iv_cast_fu_328_p1 + p_mid210_fu_293_p3);

assign empty_12_fu_357_p2 = (($signed(path_s12_20fixp_q0) < $signed(add61_s12_20fixp_fu_353_p2)) ? 1'b1 : 1'b0);

assign empty_13_fu_363_p1 = path_s12_20fixp_load_reg_506[30:0];

assign empty_14_fu_370_p1 = path_s12_20fixp_load_1_reg_512[30:0];

assign empty_4_fu_158_p2 = (tmp_5_fu_150_p3 + indvars_iv15_cast_fu_142_p1);

assign empty_6_fu_199_p3 = ((exitcond_flatten1552_fu_179_p2[0:0] == 1'b1) ? indvars_iv_next16_dup42_fu_193_p2 : indvars_iv15_fu_64);

assign empty_7_fu_211_p1 = empty_6_fu_199_p3[3:0];

assign empty_8_fu_267_p2 = (exitcond_flatten1552_fu_179_p2 | exitcond1_mid235_fu_255_p2);

assign empty_9_fu_281_p1 = indvars_iv_next11_fu_261_p2[3:0];

assign empty_fu_146_p1 = indvars_iv10_fu_56[3:0];

assign exitcond153_fu_249_p2 = ((indvars_iv_fu_52 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond1_mid235_fu_255_p2 = (not_exitcond_flatten15_fu_243_p2 & exitcond153_fu_249_p2);

assign exitcond_flatten1552_fu_179_p2 = ((indvar_flatten13_fu_60 == 10'd256) ? 1'b1 : 1'b0);

assign exitcond_flatten38_fu_164_p2 = ((indvar_flatten36_fu_68 == 13'd4096) ? 1'b1 : 1'b0);

assign indvar_flatten13_op_fu_389_p2 = (indvar_flatten13_load_reg_458 + 10'd1);

assign indvar_flatten_next14_fu_394_p3 = ((exitcond_flatten1552_reg_471[0:0] == 1'b1) ? 10'd1 : indvar_flatten13_op_fu_389_p2);

assign indvar_flatten_next37_fu_170_p2 = (indvar_flatten36_fu_68 + 13'd1);

assign indvars_iv10_mid222_fu_185_p3 = ((exitcond_flatten1552_fu_179_p2[0:0] == 1'b1) ? 5'd0 : indvars_iv10_fu_56);

assign indvars_iv10_mid2_fu_320_p3 = ((exitcond1_mid235_fu_255_p2[0:0] == 1'b1) ? indvars_iv_next11_fu_261_p2 : indvars_iv10_mid222_fu_185_p3);

assign indvars_iv15_cast_fu_142_p1 = indvars_iv15_fu_64;

assign indvars_iv15_cast_mid2_fu_207_p1 = empty_6_fu_199_p3;

assign indvars_iv_cast_fu_328_p1 = indvars_iv_mid2_fu_273_p3;

assign indvars_iv_mid2_fu_273_p3 = ((empty_8_fu_267_p2[0:0] == 1'b1) ? 5'd0 : indvars_iv_fu_52);

assign indvars_iv_next11_fu_261_p2 = (indvars_iv10_mid222_fu_185_p3 + 5'd1);

assign indvars_iv_next16_dup42_cast_fu_231_p1 = indvars_iv_next16_dup42_fu_193_p2;

assign indvars_iv_next16_dup42_fu_193_p2 = (indvars_iv15_fu_64 + 5'd1);

assign indvars_iv_next_fu_384_p2 = (indvars_iv_mid2_reg_481 + 5'd1);

assign not_exitcond_flatten15_fu_243_p2 = (exitcond_flatten1552_fu_179_p2 ^ 1'd1);

assign p_cast6_mid233_fu_235_p3 = ((exitcond_flatten1552_fu_179_p2[0:0] == 1'b1) ? indvars_iv_next16_dup42_cast_fu_231_p1 : empty_4_fu_158_p2);

assign p_cast6_mid2_cast_fu_315_p1 = p_cast6_mid2_fu_307_p3;

assign p_cast6_mid2_fu_307_p3 = ((exitcond1_mid235_fu_255_p2[0:0] == 1'b1) ? p_mid111_fu_301_p2 : p_cast6_mid233_fu_235_p3);

assign p_cast7_fu_338_p1 = empty_10_fu_332_p2;

assign p_cast8_fu_349_p1 = empty_11_reg_501;

assign p_mid111_fu_301_p2 = (p_mid1_fu_285_p3 + indvars_iv15_cast_mid2_fu_207_p1);

assign p_mid1_fu_285_p3 = {{empty_9_fu_281_p1}, {4'd0}};

assign p_mid210_fu_293_p3 = ((exitcond1_mid235_fu_255_p2[0:0] == 1'b1) ? p_mid1_fu_285_p3 : p_mid229_fu_223_p3);

assign p_mid229_fu_223_p3 = ((exitcond_flatten1552_fu_179_p2[0:0] == 1'b1) ? 8'd0 : tmp_5_fu_150_p3);

assign p_mid_fu_215_p3 = {{empty_7_fu_211_p1}, {4'd0}};

assign path_s12_20fixp_address1 = p_cast6_mid2_cast_fu_315_p1;

assign path_s12_20fixp_d0 = ($signed(path_s12_20fixp_load_1_cast_cast_fu_373_p1) + $signed(path_s12_20fixp_load_cast_cast_fu_366_p1));

assign path_s12_20fixp_load_1_cast_cast_fu_373_p1 = $signed(empty_14_fu_370_p1);

assign path_s12_20fixp_load_cast_cast_fu_366_p1 = $signed(empty_13_fu_363_p1);

assign tmp_5_fu_150_p3 = {{empty_fu_146_p1}, {4'd0}};

endmodule //fw_fw_Pipeline_VITIS_LOOP_38_3_VITIS_LOOP_39_4_VITIS_LOOP_40_5
