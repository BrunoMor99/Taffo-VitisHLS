-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fw_fw_Pipeline_VITIS_LOOP_30_1_VITIS_LOOP_31_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    path_s12_20fixp_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    path_s12_20fixp_ce0 : OUT STD_LOGIC;
    path_s12_20fixp_we0 : OUT STD_LOGIC;
    path_s12_20fixp_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fw_fw_Pipeline_VITIS_LOOP_30_1_VITIS_LOOP_31_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv30_8000000 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv26_2700000 : STD_LOGIC_VECTOR (25 downto 0) := "10011100000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exitcond_flatten_fu_107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_16_fu_177_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_18_fu_189_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_18_reg_370 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_18_reg_370_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_18_reg_370_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_18_reg_370_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_18_reg_370_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_18_reg_370_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_18_reg_370_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_18_reg_370_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_18_reg_370_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_18_reg_370_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_18_reg_370_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_20_fu_203_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal cmp12_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp12_reg_382 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp12_reg_382_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp12_reg_382_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp16_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp16_reg_387 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp16_reg_387_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp16_reg_387_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp21_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp21_reg_392 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp21_reg_392_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp21_reg_392_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast5_fu_310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal indvars_iv19_fu_64 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_next20_fu_227_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_indvars_iv19_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv25_fu_68 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv25_cast2_mid2_v_fu_145_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_indvars_iv25_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_72 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_next_fu_113_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond24441_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next26_dup39_fu_139_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_15_fu_157_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv19_mid2_fu_131_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_16_fu_177_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv19_cast3_fu_173_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_16_fu_177_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_183_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid2_fu_161_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_19_fu_195_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv19_cast4_cast_fu_199_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv25_cast1_cast_mid2_fu_169_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_215_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_21_fu_248_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_22_fu_258_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_221_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_23_fu_268_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_183_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_17_fu_278_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_fu_282_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal conv_s5_27fixp_fu_290_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_fu_296_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast15_fu_306_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_s_fu_323_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_cast_cast_cast_fu_331_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal empty_16_fu_177_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fw_mul_5ns_5ns_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fw_urem_8ns_4ns_3_12_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component fw_urem_5ns_5ns_4_9_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component fw_urem_5ns_4ns_3_9_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component fw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_5ns_5ns_8_1_1_U1 : component fw_mul_5ns_5ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din0 => empty_16_fu_177_p0,
        din1 => empty_16_fu_177_p1,
        dout => empty_16_fu_177_p2);

    urem_8ns_4ns_3_12_1_U2 : component fw_urem_8ns_4ns_3_12_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_16_fu_177_p2,
        din1 => grp_fu_183_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_183_p2);

    urem_5ns_5ns_4_9_1_U3 : component fw_urem_5ns_5ns_4_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_20_fu_203_p2,
        din1 => ap_const_lv5_D,
        ce => ap_const_logic_1,
        dout => grp_fu_209_p2);

    urem_5ns_4ns_3_9_1_U4 : component fw_urem_5ns_4ns_3_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_20_fu_203_p2,
        din1 => grp_fu_215_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_215_p2);

    urem_5ns_5ns_4_9_1_U5 : component fw_urem_5ns_5ns_4_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_20_fu_203_p2,
        din1 => ap_const_lv5_B,
        ce => ap_const_logic_1,
        dout => grp_fu_221_p2);

    flow_control_loop_pipe_sequential_init_U : component fw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((exitcond_flatten_fu_107_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_72 <= indvar_flatten_next_fu_113_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_72 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    indvars_iv19_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((exitcond_flatten_fu_107_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvars_iv19_fu_64 <= indvars_iv_next20_fu_227_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvars_iv19_fu_64 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    indvars_iv25_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((exitcond_flatten_fu_107_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvars_iv25_fu_68 <= indvars_iv25_cast2_mid2_v_fu_145_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvars_iv25_fu_68 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                cmp12_reg_382 <= cmp12_fu_252_p2;
                cmp12_reg_382_pp0_iter10_reg <= cmp12_reg_382_pp0_iter9_reg;
                cmp12_reg_382_pp0_iter9_reg <= cmp12_reg_382;
                cmp16_reg_387 <= cmp16_fu_262_p2;
                cmp16_reg_387_pp0_iter10_reg <= cmp16_reg_387_pp0_iter9_reg;
                cmp16_reg_387_pp0_iter9_reg <= cmp16_reg_387;
                cmp21_reg_392 <= cmp21_fu_272_p2;
                cmp21_reg_392_pp0_iter10_reg <= cmp21_reg_392_pp0_iter9_reg;
                cmp21_reg_392_pp0_iter9_reg <= cmp21_reg_392;
                empty_18_reg_370_pp0_iter10_reg <= empty_18_reg_370_pp0_iter9_reg;
                empty_18_reg_370_pp0_iter2_reg <= empty_18_reg_370_pp0_iter1_reg;
                empty_18_reg_370_pp0_iter3_reg <= empty_18_reg_370_pp0_iter2_reg;
                empty_18_reg_370_pp0_iter4_reg <= empty_18_reg_370_pp0_iter3_reg;
                empty_18_reg_370_pp0_iter5_reg <= empty_18_reg_370_pp0_iter4_reg;
                empty_18_reg_370_pp0_iter6_reg <= empty_18_reg_370_pp0_iter5_reg;
                empty_18_reg_370_pp0_iter7_reg <= empty_18_reg_370_pp0_iter6_reg;
                empty_18_reg_370_pp0_iter8_reg <= empty_18_reg_370_pp0_iter7_reg;
                empty_18_reg_370_pp0_iter9_reg <= empty_18_reg_370_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_18_reg_370_pp0_iter1_reg <= empty_18_reg_370;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_107_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_18_reg_370 <= empty_18_fu_189_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_fu_282_p3 <= (empty_17_fu_278_p1 & ap_const_lv27_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, exitcond_flatten_fu_107_p2)
    begin
        if (((exitcond_flatten_fu_107_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_72)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_indvars_iv19_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, indvars_iv19_fu_64, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvars_iv19_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvars_iv19_load <= indvars_iv19_fu_64;
        end if; 
    end process;


    ap_sig_allocacmp_indvars_iv25_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvars_iv25_fu_68)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvars_iv25_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvars_iv25_load <= indvars_iv25_fu_68;
        end if; 
    end process;

    cmp12_fu_252_p2 <= "1" when (empty_21_fu_248_p1 = ap_const_lv4_0) else "0";
    cmp16_fu_262_p2 <= "1" when (empty_22_fu_258_p1 = ap_const_lv3_0) else "0";
    cmp21_fu_272_p2 <= "1" when (empty_23_fu_268_p1 = ap_const_lv4_0) else "0";
    conv_s5_27fixp_fu_290_p2 <= std_logic_vector(unsigned(add_fu_282_p3) + unsigned(ap_const_lv30_8000000));
    empty_15_fu_157_p1 <= indvars_iv25_cast2_mid2_v_fu_145_p3(4 - 1 downto 0);
    empty_16_fu_177_p0 <= indvars_iv19_cast3_fu_173_p1(5 - 1 downto 0);
    empty_16_fu_177_p1 <= empty_16_fu_177_p10(5 - 1 downto 0);
    empty_16_fu_177_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv25_cast2_mid2_v_fu_145_p3),8));
    empty_17_fu_278_p1 <= grp_fu_183_p2(3 - 1 downto 0);
    empty_18_fu_189_p2 <= std_logic_vector(unsigned(indvars_iv19_cast3_fu_173_p1) + unsigned(p_mid2_fu_161_p3));
    empty_19_fu_195_p1 <= indvars_iv19_mid2_fu_131_p3(4 - 1 downto 0);
    empty_20_fu_203_p2 <= std_logic_vector(unsigned(indvars_iv19_cast4_cast_fu_199_p1) + unsigned(indvars_iv25_cast1_cast_mid2_fu_169_p1));
    empty_21_fu_248_p1 <= grp_fu_209_p2(4 - 1 downto 0);
    empty_22_fu_258_p1 <= grp_fu_215_p2(3 - 1 downto 0);
    empty_23_fu_268_p1 <= grp_fu_221_p2(4 - 1 downto 0);
    exitcond24441_fu_125_p2 <= "1" when (ap_sig_allocacmp_indvars_iv19_load = ap_const_lv5_10) else "0";
    exitcond_flatten_fu_107_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv9_100) else "0";
    grp_fu_183_p1 <= ap_const_lv8_7(4 - 1 downto 0);
    grp_fu_215_p1 <= ap_const_lv5_7(4 - 1 downto 0);
    indvar_flatten_next_fu_113_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv9_1));
    indvars_iv19_cast3_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv19_mid2_fu_131_p3),8));
    indvars_iv19_cast4_cast_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_19_fu_195_p1),5));
    indvars_iv19_mid2_fu_131_p3 <= 
        ap_const_lv5_0 when (exitcond24441_fu_125_p2(0) = '1') else 
        ap_sig_allocacmp_indvars_iv19_load;
    indvars_iv25_cast1_cast_mid2_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_15_fu_157_p1),5));
    indvars_iv25_cast2_mid2_v_fu_145_p3 <= 
        indvars_iv_next26_dup39_fu_139_p2 when (exitcond24441_fu_125_p2(0) = '1') else 
        ap_sig_allocacmp_indvars_iv25_load;
    indvars_iv_next20_fu_227_p2 <= std_logic_vector(unsigned(indvars_iv19_mid2_fu_131_p3) + unsigned(ap_const_lv5_1));
    indvars_iv_next26_dup39_fu_139_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvars_iv25_load) + unsigned(ap_const_lv5_1));
    or_cond7_fu_318_p2 <= (tmp_fu_314_p2 or cmp12_reg_382_pp0_iter10_reg);
    p_cast15_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_296_p4),26));
    p_cast5_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_18_reg_370_pp0_iter10_reg),64));
        p_cast_cast_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_s_fu_323_p3),30));

    p_mid2_fu_161_p3 <= (empty_15_fu_157_p1 & ap_const_lv4_0);
    p_s_fu_323_p3 <= 
        ap_const_lv26_2700000 when (or_cond7_fu_318_p2(0) = '1') else 
        p_cast15_fu_306_p1;
    path_s12_20fixp_address0 <= p_cast5_fu_310_p1(8 - 1 downto 0);

    path_s12_20fixp_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            path_s12_20fixp_ce0 <= ap_const_logic_1;
        else 
            path_s12_20fixp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    path_s12_20fixp_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast_cast_cast_fu_331_p1),32));

    path_s12_20fixp_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            path_s12_20fixp_we0 <= ap_const_logic_1;
        else 
            path_s12_20fixp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_296_p4 <= conv_s5_27fixp_fu_290_p2(29 downto 7);
    tmp_fu_314_p2 <= (cmp21_reg_392_pp0_iter10_reg or cmp16_reg_387_pp0_iter10_reg);
end behav;
