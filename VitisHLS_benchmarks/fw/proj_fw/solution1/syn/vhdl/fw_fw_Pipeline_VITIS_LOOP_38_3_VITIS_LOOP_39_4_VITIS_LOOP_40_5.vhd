-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fw_fw_Pipeline_VITIS_LOOP_38_3_VITIS_LOOP_39_4_VITIS_LOOP_40_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    path_s12_20fixp_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    path_s12_20fixp_ce0 : OUT STD_LOGIC;
    path_s12_20fixp_we0 : OUT STD_LOGIC;
    path_s12_20fixp_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    path_s12_20fixp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    path_s12_20fixp_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    path_s12_20fixp_ce1 : OUT STD_LOGIC;
    path_s12_20fixp_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fw_fw_Pipeline_VITIS_LOOP_38_3_VITIS_LOOP_39_4_VITIS_LOOP_40_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv10_100 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal exitcond_flatten38_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal indvar_flatten13_load_reg_458 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal indvar_flatten_next37_fu_170_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_flatten_next37_reg_466 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_flatten1552_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1552_reg_471 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_6_fu_199_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_6_reg_476 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_mid2_fu_273_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_mid2_reg_481 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv10_mid2_fu_320_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv10_mid2_reg_486 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_11_fu_343_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_11_reg_501 : STD_LOGIC_VECTOR (7 downto 0);
    signal path_s12_20fixp_load_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal path_s12_20fixp_load_1_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal path_s12_20fixp_addr_2_reg_518 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal p_cast6_mid2_cast_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal p_cast7_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast8_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal indvars_iv_fu_52 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_next_fu_384_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal indvars_iv10_fu_56 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten13_fu_60 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_next14_fu_394_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv15_fu_64 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten36_fu_68 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_12_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal empty_fu_146_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_150_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv15_cast_fu_142_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv_next16_dup42_fu_193_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_7_fu_211_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next16_dup42_cast_fu_231_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_4_fu_158_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond153_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten15_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv10_mid222_fu_185_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_mid235_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_8_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next11_fu_261_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_9_fu_281_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid1_fu_285_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid229_fu_223_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv15_cast_mid2_fu_207_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid111_fu_301_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast6_mid233_fu_235_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast6_mid2_fu_307_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv_cast_fu_328_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid_fu_215_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_10_fu_332_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid210_fu_293_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add61_s12_20fixp_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_13_fu_363_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_14_fu_370_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal path_s12_20fixp_load_1_cast_cast_fu_373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal path_s12_20fixp_load_cast_cast_fu_366_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten13_op_fu_389_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component fw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten13_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_60 <= ap_const_lv10_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    indvar_flatten13_fu_60 <= indvar_flatten_next14_fu_394_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten36_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten36_fu_68 <= ap_const_lv13_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    indvar_flatten36_fu_68 <= indvar_flatten_next37_reg_466;
                end if;
            end if; 
        end if;
    end process;

    indvars_iv10_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvars_iv10_fu_56 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    indvars_iv10_fu_56 <= indvars_iv10_mid2_reg_486;
                end if;
            end if; 
        end if;
    end process;

    indvars_iv15_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvars_iv15_fu_64 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    indvars_iv15_fu_64 <= empty_6_reg_476;
                end if;
            end if; 
        end if;
    end process;

    indvars_iv_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvars_iv_fu_52 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    indvars_iv_fu_52 <= indvars_iv_next_fu_384_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten38_fu_164_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                empty_11_reg_501 <= empty_11_fu_343_p2;
                empty_6_reg_476 <= empty_6_fu_199_p3;
                exitcond_flatten1552_reg_471 <= exitcond_flatten1552_fu_179_p2;
                indvars_iv10_mid2_reg_486 <= indvars_iv10_mid2_fu_320_p3;
                indvars_iv_mid2_reg_481 <= indvars_iv_mid2_fu_273_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                indvar_flatten13_load_reg_458 <= indvar_flatten13_fu_60;
                indvar_flatten_next37_reg_466 <= indvar_flatten_next37_fu_170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                path_s12_20fixp_addr_2_reg_518 <= p_cast8_fu_349_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                path_s12_20fixp_load_1_reg_512 <= path_s12_20fixp_q0;
                path_s12_20fixp_load_reg_506 <= path_s12_20fixp_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add61_s12_20fixp_fu_353_p2 <= std_logic_vector(unsigned(path_s12_20fixp_load_1_reg_512) + unsigned(path_s12_20fixp_load_reg_506));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, exitcond_flatten38_fu_164_p2)
    begin
        if (((exitcond_flatten38_fu_164_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_10_fu_332_p2 <= std_logic_vector(unsigned(indvars_iv_cast_fu_328_p1) + unsigned(p_mid_fu_215_p3));
    empty_11_fu_343_p2 <= std_logic_vector(unsigned(indvars_iv_cast_fu_328_p1) + unsigned(p_mid210_fu_293_p3));
    empty_12_fu_357_p2 <= "1" when (signed(path_s12_20fixp_q0) < signed(add61_s12_20fixp_fu_353_p2)) else "0";
    empty_13_fu_363_p1 <= path_s12_20fixp_load_reg_506(31 - 1 downto 0);
    empty_14_fu_370_p1 <= path_s12_20fixp_load_1_reg_512(31 - 1 downto 0);
    empty_4_fu_158_p2 <= std_logic_vector(unsigned(tmp_5_fu_150_p3) + unsigned(indvars_iv15_cast_fu_142_p1));
    empty_6_fu_199_p3 <= 
        indvars_iv_next16_dup42_fu_193_p2 when (exitcond_flatten1552_fu_179_p2(0) = '1') else 
        indvars_iv15_fu_64;
    empty_7_fu_211_p1 <= empty_6_fu_199_p3(4 - 1 downto 0);
    empty_8_fu_267_p2 <= (exitcond_flatten1552_fu_179_p2 or exitcond1_mid235_fu_255_p2);
    empty_9_fu_281_p1 <= indvars_iv_next11_fu_261_p2(4 - 1 downto 0);
    empty_fu_146_p1 <= indvars_iv10_fu_56(4 - 1 downto 0);
    exitcond153_fu_249_p2 <= "1" when (indvars_iv_fu_52 = ap_const_lv5_10) else "0";
    exitcond1_mid235_fu_255_p2 <= (not_exitcond_flatten15_fu_243_p2 and exitcond153_fu_249_p2);
    exitcond_flatten1552_fu_179_p2 <= "1" when (indvar_flatten13_fu_60 = ap_const_lv10_100) else "0";
    exitcond_flatten38_fu_164_p2 <= "1" when (indvar_flatten36_fu_68 = ap_const_lv13_1000) else "0";
    indvar_flatten13_op_fu_389_p2 <= std_logic_vector(unsigned(indvar_flatten13_load_reg_458) + unsigned(ap_const_lv10_1));
    indvar_flatten_next14_fu_394_p3 <= 
        ap_const_lv10_1 when (exitcond_flatten1552_reg_471(0) = '1') else 
        indvar_flatten13_op_fu_389_p2;
    indvar_flatten_next37_fu_170_p2 <= std_logic_vector(unsigned(indvar_flatten36_fu_68) + unsigned(ap_const_lv13_1));
    indvars_iv10_mid222_fu_185_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten1552_fu_179_p2(0) = '1') else 
        indvars_iv10_fu_56;
    indvars_iv10_mid2_fu_320_p3 <= 
        indvars_iv_next11_fu_261_p2 when (exitcond1_mid235_fu_255_p2(0) = '1') else 
        indvars_iv10_mid222_fu_185_p3;
    indvars_iv15_cast_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv15_fu_64),8));
    indvars_iv15_cast_mid2_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_6_fu_199_p3),8));
    indvars_iv_cast_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_mid2_fu_273_p3),8));
    indvars_iv_mid2_fu_273_p3 <= 
        ap_const_lv5_0 when (empty_8_fu_267_p2(0) = '1') else 
        indvars_iv_fu_52;
    indvars_iv_next11_fu_261_p2 <= std_logic_vector(unsigned(indvars_iv10_mid222_fu_185_p3) + unsigned(ap_const_lv5_1));
    indvars_iv_next16_dup42_cast_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next16_dup42_fu_193_p2),8));
    indvars_iv_next16_dup42_fu_193_p2 <= std_logic_vector(unsigned(indvars_iv15_fu_64) + unsigned(ap_const_lv5_1));
    indvars_iv_next_fu_384_p2 <= std_logic_vector(unsigned(indvars_iv_mid2_reg_481) + unsigned(ap_const_lv5_1));
    not_exitcond_flatten15_fu_243_p2 <= (exitcond_flatten1552_fu_179_p2 xor ap_const_lv1_1);
    p_cast6_mid233_fu_235_p3 <= 
        indvars_iv_next16_dup42_cast_fu_231_p1 when (exitcond_flatten1552_fu_179_p2(0) = '1') else 
        empty_4_fu_158_p2;
    p_cast6_mid2_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast6_mid2_fu_307_p3),64));
    p_cast6_mid2_fu_307_p3 <= 
        p_mid111_fu_301_p2 when (exitcond1_mid235_fu_255_p2(0) = '1') else 
        p_cast6_mid233_fu_235_p3;
    p_cast7_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_10_fu_332_p2),64));
    p_cast8_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_11_reg_501),64));
    p_mid111_fu_301_p2 <= std_logic_vector(unsigned(p_mid1_fu_285_p3) + unsigned(indvars_iv15_cast_mid2_fu_207_p1));
    p_mid1_fu_285_p3 <= (empty_9_fu_281_p1 & ap_const_lv4_0);
    p_mid210_fu_293_p3 <= 
        p_mid1_fu_285_p3 when (exitcond1_mid235_fu_255_p2(0) = '1') else 
        p_mid229_fu_223_p3;
    p_mid229_fu_223_p3 <= 
        ap_const_lv8_0 when (exitcond_flatten1552_fu_179_p2(0) = '1') else 
        tmp_5_fu_150_p3;
    p_mid_fu_215_p3 <= (empty_7_fu_211_p1 & ap_const_lv4_0);

    path_s12_20fixp_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, path_s12_20fixp_addr_2_reg_518, ap_block_pp0_stage1, p_cast7_fu_338_p1, p_cast8_fu_349_p1, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            path_s12_20fixp_address0 <= path_s12_20fixp_addr_2_reg_518;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            path_s12_20fixp_address0 <= p_cast8_fu_349_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            path_s12_20fixp_address0 <= p_cast7_fu_338_p1(8 - 1 downto 0);
        else 
            path_s12_20fixp_address0 <= "XXXXXXXX";
        end if; 
    end process;

    path_s12_20fixp_address1 <= p_cast6_mid2_cast_fu_315_p1(8 - 1 downto 0);

    path_s12_20fixp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            path_s12_20fixp_ce0 <= ap_const_logic_1;
        else 
            path_s12_20fixp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    path_s12_20fixp_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            path_s12_20fixp_ce1 <= ap_const_logic_1;
        else 
            path_s12_20fixp_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    path_s12_20fixp_d0 <= std_logic_vector(signed(path_s12_20fixp_load_1_cast_cast_fu_373_p1) + signed(path_s12_20fixp_load_cast_cast_fu_366_p1));
        path_s12_20fixp_load_1_cast_cast_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_14_fu_370_p1),32));

        path_s12_20fixp_load_cast_cast_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_13_fu_363_p1),32));


    path_s12_20fixp_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, empty_12_fu_357_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_12_fu_357_p2 = ap_const_lv1_0))) then 
            path_s12_20fixp_we0 <= ap_const_logic_1;
        else 
            path_s12_20fixp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_5_fu_150_p3 <= (empty_fu_146_p1 & ap_const_lv4_0);
end behav;
