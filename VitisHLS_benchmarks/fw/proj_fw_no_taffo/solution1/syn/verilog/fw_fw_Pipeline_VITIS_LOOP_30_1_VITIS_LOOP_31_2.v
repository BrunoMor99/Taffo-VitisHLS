// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fw_fw_Pipeline_VITIS_LOOP_30_1_VITIS_LOOP_31_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        path_address0,
        path_ce0,
        path_we0,
        path_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] path_address0;
output   path_ce0;
output   path_we0;
output  [31:0] path_d0;

reg ap_idle;
reg path_ce0;
reg path_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln30_fu_100_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] mul_ln32_fu_170_p2;
wire   [7:0] add_ln32_1_fu_182_p2;
reg   [7:0] add_ln32_1_reg_338;
reg   [7:0] add_ln32_1_reg_338_pp0_iter1_reg;
reg   [7:0] add_ln32_1_reg_338_pp0_iter2_reg;
reg   [7:0] add_ln32_1_reg_338_pp0_iter3_reg;
reg   [7:0] add_ln32_1_reg_338_pp0_iter4_reg;
reg   [7:0] add_ln32_1_reg_338_pp0_iter5_reg;
reg   [7:0] add_ln32_1_reg_338_pp0_iter6_reg;
reg   [7:0] add_ln32_1_reg_338_pp0_iter7_reg;
reg   [7:0] add_ln32_1_reg_338_pp0_iter8_reg;
reg   [7:0] add_ln32_1_reg_338_pp0_iter9_reg;
reg   [7:0] add_ln32_1_reg_338_pp0_iter10_reg;
reg   [7:0] add_ln32_1_reg_338_pp0_iter11_reg;
wire   [4:0] empty_11_fu_196_p2;
wire   [0:0] icmp_ln33_fu_245_p2;
reg   [0:0] icmp_ln33_reg_350;
reg   [0:0] icmp_ln33_reg_350_pp0_iter9_reg;
reg   [0:0] icmp_ln33_reg_350_pp0_iter10_reg;
reg   [0:0] icmp_ln33_reg_350_pp0_iter11_reg;
wire   [0:0] icmp_ln33_1_fu_255_p2;
reg   [0:0] icmp_ln33_1_reg_355;
reg   [0:0] icmp_ln33_1_reg_355_pp0_iter9_reg;
reg   [0:0] icmp_ln33_1_reg_355_pp0_iter10_reg;
reg   [0:0] icmp_ln33_1_reg_355_pp0_iter11_reg;
wire   [0:0] icmp_ln33_2_fu_265_p2;
reg   [0:0] icmp_ln33_2_reg_360;
reg   [0:0] icmp_ln33_2_reg_360_pp0_iter9_reg;
reg   [0:0] icmp_ln33_2_reg_360_pp0_iter10_reg;
reg   [0:0] icmp_ln33_2_reg_360_pp0_iter11_reg;
wire   [63:0] zext_ln32_1_fu_286_p1;
wire    ap_block_pp0_stage0;
reg   [4:0] j_fu_54;
wire   [4:0] add_ln31_fu_220_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_j_load;
reg   [4:0] i_fu_58;
wire   [4:0] i_cast2_mid2_v_fu_138_p3;
reg   [4:0] ap_sig_allocacmp_i_load;
reg   [8:0] indvar_flatten_fu_62;
wire   [8:0] add_ln30_fu_106_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [31:0] grp_fu_79_p0;
wire   [0:0] icmp_ln31_fu_118_p2;
wire   [4:0] add_ln30_1_fu_132_p2;
wire   [3:0] empty_10_fu_150_p1;
wire   [4:0] j_mid2_fu_124_p3;
wire   [4:0] mul_ln32_fu_170_p0;
wire   [7:0] j_cast3_fu_166_p1;
wire   [4:0] mul_ln32_fu_170_p1;
wire   [3:0] grp_fu_176_p1;
wire   [7:0] p_mid2_fu_154_p3;
wire   [3:0] trunc_ln33_fu_188_p1;
wire   [4:0] trunc_ln33_1_cast_fu_192_p1;
wire   [4:0] zext_ln31_mid2_fu_162_p1;
wire   [3:0] grp_fu_208_p1;
wire   [3:0] grp_fu_202_p2;
wire   [3:0] trunc_ln33_1_fu_241_p1;
wire   [2:0] grp_fu_208_p2;
wire   [2:0] trunc_ln33_2_fu_251_p1;
wire   [3:0] grp_fu_214_p2;
wire   [3:0] trunc_ln33_3_fu_261_p1;
wire   [2:0] grp_fu_176_p2;
wire   [2:0] trunc_ln32_fu_271_p1;
wire   [2:0] add_ln32_fu_275_p2;
wire   [0:0] or_ln33_fu_290_p2;
wire   [0:0] or_ln33_1_fu_294_p2;
wire   [31:0] grp_fu_79_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [7:0] mul_ln32_fu_170_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fw_sitofp_32ns_32_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_79_p0),
    .ce(1'b1),
    .dout(grp_fu_79_p1)
);

fw_mul_5ns_5ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
mul_5ns_5ns_8_1_1_U2(
    .din0(mul_ln32_fu_170_p0),
    .din1(mul_ln32_fu_170_p1),
    .dout(mul_ln32_fu_170_p2)
);

fw_urem_8ns_4ns_3_12_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 3 ))
urem_8ns_4ns_3_12_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_ln32_fu_170_p2),
    .din1(grp_fu_176_p1),
    .ce(1'b1),
    .dout(grp_fu_176_p2)
);

fw_urem_5ns_5ns_4_9_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 4 ))
urem_5ns_5ns_4_9_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_11_fu_196_p2),
    .din1(5'd13),
    .ce(1'b1),
    .dout(grp_fu_202_p2)
);

fw_urem_5ns_4ns_3_9_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 3 ))
urem_5ns_4ns_3_9_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_11_fu_196_p2),
    .din1(grp_fu_208_p1),
    .ce(1'b1),
    .dout(grp_fu_208_p2)
);

fw_urem_5ns_5ns_4_9_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 4 ))
urem_5ns_5ns_4_9_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_11_fu_196_p2),
    .din1(5'd11),
    .ce(1'b1),
    .dout(grp_fu_214_p2)
);

fw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln30_fu_100_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_58 <= i_cast2_mid2_v_fu_138_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_58 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln30_fu_100_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_62 <= add_ln30_fu_106_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_62 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln30_fu_100_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_54 <= add_ln31_fu_220_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_54 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_100_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln32_1_reg_338 <= add_ln32_1_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln32_1_reg_338_pp0_iter10_reg <= add_ln32_1_reg_338_pp0_iter9_reg;
        add_ln32_1_reg_338_pp0_iter11_reg <= add_ln32_1_reg_338_pp0_iter10_reg;
        add_ln32_1_reg_338_pp0_iter2_reg <= add_ln32_1_reg_338_pp0_iter1_reg;
        add_ln32_1_reg_338_pp0_iter3_reg <= add_ln32_1_reg_338_pp0_iter2_reg;
        add_ln32_1_reg_338_pp0_iter4_reg <= add_ln32_1_reg_338_pp0_iter3_reg;
        add_ln32_1_reg_338_pp0_iter5_reg <= add_ln32_1_reg_338_pp0_iter4_reg;
        add_ln32_1_reg_338_pp0_iter6_reg <= add_ln32_1_reg_338_pp0_iter5_reg;
        add_ln32_1_reg_338_pp0_iter7_reg <= add_ln32_1_reg_338_pp0_iter6_reg;
        add_ln32_1_reg_338_pp0_iter8_reg <= add_ln32_1_reg_338_pp0_iter7_reg;
        add_ln32_1_reg_338_pp0_iter9_reg <= add_ln32_1_reg_338_pp0_iter8_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln33_1_reg_355 <= icmp_ln33_1_fu_255_p2;
        icmp_ln33_1_reg_355_pp0_iter10_reg <= icmp_ln33_1_reg_355_pp0_iter9_reg;
        icmp_ln33_1_reg_355_pp0_iter11_reg <= icmp_ln33_1_reg_355_pp0_iter10_reg;
        icmp_ln33_1_reg_355_pp0_iter9_reg <= icmp_ln33_1_reg_355;
        icmp_ln33_2_reg_360 <= icmp_ln33_2_fu_265_p2;
        icmp_ln33_2_reg_360_pp0_iter10_reg <= icmp_ln33_2_reg_360_pp0_iter9_reg;
        icmp_ln33_2_reg_360_pp0_iter11_reg <= icmp_ln33_2_reg_360_pp0_iter10_reg;
        icmp_ln33_2_reg_360_pp0_iter9_reg <= icmp_ln33_2_reg_360;
        icmp_ln33_reg_350 <= icmp_ln33_fu_245_p2;
        icmp_ln33_reg_350_pp0_iter10_reg <= icmp_ln33_reg_350_pp0_iter9_reg;
        icmp_ln33_reg_350_pp0_iter11_reg <= icmp_ln33_reg_350_pp0_iter10_reg;
        icmp_ln33_reg_350_pp0_iter9_reg <= icmp_ln33_reg_350;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln32_1_reg_338_pp0_iter1_reg <= add_ln32_1_reg_338;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_100_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 5'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        path_ce0 = 1'b1;
    end else begin
        path_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        path_we0 = 1'b1;
    end else begin
        path_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln30_1_fu_132_p2 = (ap_sig_allocacmp_i_load + 5'd1);

assign add_ln30_fu_106_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln31_fu_220_p2 = (j_mid2_fu_124_p3 + 5'd1);

assign add_ln32_1_fu_182_p2 = (j_cast3_fu_166_p1 + p_mid2_fu_154_p3);

assign add_ln32_fu_275_p2 = (trunc_ln32_fu_271_p1 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_10_fu_150_p1 = i_cast2_mid2_v_fu_138_p3[3:0];

assign empty_11_fu_196_p2 = (trunc_ln33_1_cast_fu_192_p1 + zext_ln31_mid2_fu_162_p1);

assign grp_fu_176_p1 = 8'd7;

assign grp_fu_208_p1 = 5'd7;

assign grp_fu_79_p0 = add_ln32_fu_275_p2;

assign i_cast2_mid2_v_fu_138_p3 = ((icmp_ln31_fu_118_p2[0:0] == 1'b1) ? add_ln30_1_fu_132_p2 : ap_sig_allocacmp_i_load);

assign icmp_ln30_fu_100_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_118_p2 = ((ap_sig_allocacmp_j_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_255_p2 = ((trunc_ln33_2_fu_251_p1 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_2_fu_265_p2 = ((trunc_ln33_3_fu_261_p1 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_245_p2 = ((trunc_ln33_1_fu_241_p1 == 4'd0) ? 1'b1 : 1'b0);

assign j_cast3_fu_166_p1 = j_mid2_fu_124_p3;

assign j_mid2_fu_124_p3 = ((icmp_ln31_fu_118_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j_load);

assign mul_ln32_fu_170_p0 = j_cast3_fu_166_p1;

assign mul_ln32_fu_170_p1 = mul_ln32_fu_170_p10;

assign mul_ln32_fu_170_p10 = i_cast2_mid2_v_fu_138_p3;

assign or_ln33_1_fu_294_p2 = (or_ln33_fu_290_p2 | icmp_ln33_reg_350_pp0_iter11_reg);

assign or_ln33_fu_290_p2 = (icmp_ln33_2_reg_360_pp0_iter11_reg | icmp_ln33_1_reg_355_pp0_iter11_reg);

assign p_mid2_fu_154_p3 = {{empty_10_fu_150_p1}, {4'd0}};

assign path_address0 = zext_ln32_1_fu_286_p1;

assign path_d0 = ((or_ln33_1_fu_294_p2[0:0] == 1'b1) ? 32'd1148829696 : grp_fu_79_p1);

assign trunc_ln32_fu_271_p1 = grp_fu_176_p2[2:0];

assign trunc_ln33_1_cast_fu_192_p1 = trunc_ln33_fu_188_p1;

assign trunc_ln33_1_fu_241_p1 = grp_fu_202_p2[3:0];

assign trunc_ln33_2_fu_251_p1 = grp_fu_208_p2[2:0];

assign trunc_ln33_3_fu_261_p1 = grp_fu_214_p2[3:0];

assign trunc_ln33_fu_188_p1 = j_mid2_fu_124_p3[3:0];

assign zext_ln31_mid2_fu_162_p1 = empty_10_fu_150_p1;

assign zext_ln32_1_fu_286_p1 = add_ln32_1_reg_338_pp0_iter11_reg;

endmodule //fw_fw_Pipeline_VITIS_LOOP_30_1_VITIS_LOOP_31_2
