// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="atax_atax,hls_ip_2022_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7v585t-ffg1761-2,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.600000,HLS_SYN_LAT=359,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=6580,HLS_SYN_LUT=4127,HLS_VERSION=2022_2}" *)

module atax (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 64'd1;
parameter    ap_ST_fsm_state2 = 64'd2;
parameter    ap_ST_fsm_state3 = 64'd4;
parameter    ap_ST_fsm_state4 = 64'd8;
parameter    ap_ST_fsm_state5 = 64'd16;
parameter    ap_ST_fsm_state6 = 64'd32;
parameter    ap_ST_fsm_state7 = 64'd64;
parameter    ap_ST_fsm_state8 = 64'd128;
parameter    ap_ST_fsm_state9 = 64'd256;
parameter    ap_ST_fsm_state10 = 64'd512;
parameter    ap_ST_fsm_state11 = 64'd1024;
parameter    ap_ST_fsm_state12 = 64'd2048;
parameter    ap_ST_fsm_state13 = 64'd4096;
parameter    ap_ST_fsm_state14 = 64'd8192;
parameter    ap_ST_fsm_state15 = 64'd16384;
parameter    ap_ST_fsm_state16 = 64'd32768;
parameter    ap_ST_fsm_state17 = 64'd65536;
parameter    ap_ST_fsm_state18 = 64'd131072;
parameter    ap_ST_fsm_state19 = 64'd262144;
parameter    ap_ST_fsm_state20 = 64'd524288;
parameter    ap_ST_fsm_state21 = 64'd1048576;
parameter    ap_ST_fsm_state22 = 64'd2097152;
parameter    ap_ST_fsm_state23 = 64'd4194304;
parameter    ap_ST_fsm_state24 = 64'd8388608;
parameter    ap_ST_fsm_state25 = 64'd16777216;
parameter    ap_ST_fsm_state26 = 64'd33554432;
parameter    ap_ST_fsm_state27 = 64'd67108864;
parameter    ap_ST_fsm_state28 = 64'd134217728;
parameter    ap_ST_fsm_state29 = 64'd268435456;
parameter    ap_ST_fsm_state30 = 64'd536870912;
parameter    ap_ST_fsm_state31 = 64'd1073741824;
parameter    ap_ST_fsm_state32 = 64'd2147483648;
parameter    ap_ST_fsm_state33 = 64'd4294967296;
parameter    ap_ST_fsm_state34 = 64'd8589934592;
parameter    ap_ST_fsm_state35 = 64'd17179869184;
parameter    ap_ST_fsm_state36 = 64'd34359738368;
parameter    ap_ST_fsm_state37 = 64'd68719476736;
parameter    ap_ST_fsm_state38 = 64'd137438953472;
parameter    ap_ST_fsm_state39 = 64'd274877906944;
parameter    ap_ST_fsm_state40 = 64'd549755813888;
parameter    ap_ST_fsm_state41 = 64'd1099511627776;
parameter    ap_ST_fsm_state42 = 64'd2199023255552;
parameter    ap_ST_fsm_state43 = 64'd4398046511104;
parameter    ap_ST_fsm_state44 = 64'd8796093022208;
parameter    ap_ST_fsm_state45 = 64'd17592186044416;
parameter    ap_ST_fsm_state46 = 64'd35184372088832;
parameter    ap_ST_fsm_state47 = 64'd70368744177664;
parameter    ap_ST_fsm_state48 = 64'd140737488355328;
parameter    ap_ST_fsm_state49 = 64'd281474976710656;
parameter    ap_ST_fsm_state50 = 64'd562949953421312;
parameter    ap_ST_fsm_state51 = 64'd1125899906842624;
parameter    ap_ST_fsm_state52 = 64'd2251799813685248;
parameter    ap_ST_fsm_state53 = 64'd4503599627370496;
parameter    ap_ST_fsm_state54 = 64'd9007199254740992;
parameter    ap_ST_fsm_state55 = 64'd18014398509481984;
parameter    ap_ST_fsm_state56 = 64'd36028797018963968;
parameter    ap_ST_fsm_state57 = 64'd72057594037927936;
parameter    ap_ST_fsm_state58 = 64'd144115188075855872;
parameter    ap_ST_fsm_state59 = 64'd288230376151711744;
parameter    ap_ST_fsm_state60 = 64'd576460752303423488;
parameter    ap_ST_fsm_state61 = 64'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 64'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 64'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 64'd9223372036854775808;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [63:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] A;
wire   [63:0] x;
wire   [63:0] y;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state43;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state4;
reg   [63:0] gmem_addr_reg_780;
reg   [63:0] gmem_addr_1_reg_786;
reg   [61:0] trunc_ln1_reg_808;
reg   [31:0] gmem_addr_read_reg_819;
reg   [31:0] gmem_addr_read_1_reg_824;
reg   [31:0] gmem_addr_read_2_reg_829;
reg   [31:0] gmem_addr_read_3_reg_834;
reg   [31:0] gmem_addr_read_4_reg_839;
reg   [31:0] gmem_addr_read_5_reg_844;
reg   [31:0] gmem_addr_read_6_reg_849;
reg   [31:0] gmem_addr_read_7_reg_854;
reg   [31:0] gmem_addr_read_8_reg_859;
reg   [31:0] gmem_addr_read_9_reg_864;
reg   [31:0] gmem_addr_read_10_reg_869;
reg   [31:0] gmem_addr_read_11_reg_874;
reg   [31:0] gmem_addr_read_12_reg_879;
reg   [31:0] gmem_addr_read_13_reg_884;
reg   [31:0] gmem_addr_read_14_reg_889;
reg   [31:0] gmem_addr_read_15_reg_894;
reg   [31:0] gmem_addr_1_read_reg_899;
reg   [31:0] gmem_addr_1_read_1_reg_904;
reg   [31:0] gmem_addr_1_read_2_reg_909;
reg   [31:0] gmem_addr_1_read_3_reg_914;
reg   [31:0] gmem_addr_1_read_4_reg_919;
reg   [31:0] gmem_addr_1_read_5_reg_924;
reg   [31:0] gmem_addr_1_read_6_reg_929;
reg   [31:0] gmem_addr_1_read_7_reg_934;
reg   [31:0] gmem_addr_1_read_8_reg_939;
reg   [31:0] gmem_addr_1_read_9_reg_944;
reg   [31:0] gmem_addr_1_read_10_reg_949;
reg   [31:0] gmem_addr_1_read_11_reg_954;
reg   [31:0] gmem_addr_1_read_12_reg_959;
reg   [31:0] gmem_addr_1_read_13_reg_964;
reg   [31:0] gmem_addr_1_read_14_reg_969;
reg   [31:0] gmem_addr_1_read_15_reg_974;
wire   [31:0] empty_48_fu_428_p1;
reg   [31:0] empty_48_reg_979;
wire    ap_CS_fsm_state41;
wire   [31:0] empty_49_fu_432_p1;
reg   [31:0] empty_49_reg_984;
wire   [31:0] empty_50_fu_436_p1;
reg   [31:0] empty_50_reg_989;
wire   [31:0] empty_51_fu_440_p1;
reg   [31:0] empty_51_reg_994;
wire   [31:0] empty_52_fu_444_p1;
reg   [31:0] empty_52_reg_999;
wire   [31:0] empty_53_fu_448_p1;
reg   [31:0] empty_53_reg_1004;
wire   [31:0] empty_54_fu_452_p1;
reg   [31:0] empty_54_reg_1009;
wire   [31:0] empty_55_fu_456_p1;
reg   [31:0] empty_55_reg_1014;
wire   [31:0] empty_56_fu_460_p1;
reg   [31:0] empty_56_reg_1019;
wire   [31:0] empty_57_fu_464_p1;
reg   [31:0] empty_57_reg_1024;
wire   [31:0] empty_58_fu_468_p1;
reg   [31:0] empty_58_reg_1029;
wire   [31:0] empty_59_fu_472_p1;
reg   [31:0] empty_59_reg_1034;
wire   [31:0] empty_60_fu_476_p1;
reg   [31:0] empty_60_reg_1039;
wire   [31:0] empty_61_fu_480_p1;
reg   [31:0] empty_61_reg_1044;
wire   [31:0] empty_62_fu_484_p1;
reg   [31:0] empty_62_reg_1049;
wire   [31:0] empty_63_fu_488_p1;
reg   [31:0] empty_63_reg_1054;
wire   [31:0] bitcast_ln60_fu_492_p1;
reg   [31:0] bitcast_ln60_reg_1059;
wire   [31:0] bitcast_ln60_1_fu_496_p1;
reg   [31:0] bitcast_ln60_1_reg_1064;
wire   [31:0] bitcast_ln60_2_fu_500_p1;
reg   [31:0] bitcast_ln60_2_reg_1069;
wire   [31:0] bitcast_ln60_3_fu_504_p1;
reg   [31:0] bitcast_ln60_3_reg_1074;
wire   [31:0] bitcast_ln60_4_fu_508_p1;
reg   [31:0] bitcast_ln60_4_reg_1079;
wire   [31:0] bitcast_ln60_5_fu_512_p1;
reg   [31:0] bitcast_ln60_5_reg_1084;
wire   [31:0] bitcast_ln60_6_fu_516_p1;
reg   [31:0] bitcast_ln60_6_reg_1089;
wire   [31:0] bitcast_ln60_7_fu_520_p1;
reg   [31:0] bitcast_ln60_7_reg_1094;
wire   [31:0] bitcast_ln60_8_fu_524_p1;
reg   [31:0] bitcast_ln60_8_reg_1099;
wire   [31:0] bitcast_ln60_9_fu_528_p1;
reg   [31:0] bitcast_ln60_9_reg_1104;
wire   [31:0] bitcast_ln60_10_fu_532_p1;
reg   [31:0] bitcast_ln60_10_reg_1109;
wire   [31:0] bitcast_ln60_11_fu_536_p1;
reg   [31:0] bitcast_ln60_11_reg_1114;
wire   [31:0] bitcast_ln60_12_fu_540_p1;
reg   [31:0] bitcast_ln60_12_reg_1119;
wire   [31:0] bitcast_ln60_13_fu_544_p1;
reg   [31:0] bitcast_ln60_13_reg_1124;
wire   [31:0] bitcast_ln60_14_fu_548_p1;
reg   [31:0] bitcast_ln60_14_reg_1129;
wire   [31:0] bitcast_ln60_15_fu_552_p1;
reg   [31:0] bitcast_ln60_15_reg_1134;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_ap_start;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_ap_done;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_ap_idle;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_ap_ready;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWVALID;
wire   [63:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWADDR;
wire   [0:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWID;
wire   [31:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWLEN;
wire   [2:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWSIZE;
wire   [1:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWBURST;
wire   [1:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWLOCK;
wire   [3:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWCACHE;
wire   [2:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWPROT;
wire   [3:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWQOS;
wire   [3:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWREGION;
wire   [0:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWUSER;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_WVALID;
wire   [31:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_WDATA;
wire   [3:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_WSTRB;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_WLAST;
wire   [0:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_WID;
wire   [0:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_WUSER;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARVALID;
wire   [63:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARADDR;
wire   [0:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARID;
wire   [31:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARLEN;
wire   [2:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARSIZE;
wire   [1:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARBURST;
wire   [1:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARLOCK;
wire   [3:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARCACHE;
wire   [2:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARPROT;
wire   [3:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARQOS;
wire   [3:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARREGION;
wire   [0:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARUSER;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_RREADY;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_BREADY;
wire   [31:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out_ap_vld;
wire   [31:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out1;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out1_ap_vld;
wire   [31:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out2;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out2_ap_vld;
wire   [31:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out3;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out3_ap_vld;
wire   [31:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out4;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out4_ap_vld;
wire   [31:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out5;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out5_ap_vld;
wire   [31:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out6;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out6_ap_vld;
wire   [31:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out7;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out7_ap_vld;
wire   [31:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out8;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out8_ap_vld;
wire   [31:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out9;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out9_ap_vld;
wire   [31:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out10;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out10_ap_vld;
wire   [31:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out11;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out11_ap_vld;
wire   [31:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out12;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out12_ap_vld;
wire   [31:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out13;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out13_ap_vld;
wire   [31:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out14;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out14_ap_vld;
wire   [31:0] grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_add195_out;
wire    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_add195_out_ap_vld;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg   [31:0] gmem_WDATA;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    gmem_BREADY;
reg    grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_ap_start_reg;
wire    ap_CS_fsm_state42;
wire  signed [63:0] p_cast_cast_fu_378_p1;
wire  signed [63:0] sext_ln60_fu_398_p1;
wire  signed [63:0] sext_ln48_fu_418_p1;
wire   [31:0] bitcast_ln64_fu_559_p1;
wire   [31:0] bitcast_ln64_1_fu_567_p1;
wire   [31:0] bitcast_ln64_2_fu_575_p1;
wire   [31:0] bitcast_ln64_3_fu_583_p1;
wire   [31:0] bitcast_ln64_4_fu_591_p1;
wire   [31:0] bitcast_ln64_5_fu_599_p1;
wire   [31:0] bitcast_ln64_6_fu_607_p1;
wire   [31:0] bitcast_ln64_7_fu_615_p1;
wire   [31:0] bitcast_ln64_8_fu_623_p1;
wire   [31:0] bitcast_ln64_9_fu_631_p1;
wire   [31:0] bitcast_ln64_10_fu_639_p1;
wire   [31:0] bitcast_ln64_11_fu_647_p1;
wire   [31:0] bitcast_ln64_12_fu_655_p1;
wire   [31:0] bitcast_ln64_13_fu_663_p1;
wire   [31:0] bitcast_ln64_14_fu_671_p1;
wire   [31:0] bitcast_ln64_15_fu_679_p1;
wire   [61:0] p_cast_fu_368_p4;
wire   [61:0] trunc_ln_fu_388_p4;
reg   [63:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
reg    ap_ST_fsm_state25_blk;
reg    ap_ST_fsm_state26_blk;
reg    ap_ST_fsm_state27_blk;
reg    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
reg    ap_ST_fsm_state30_blk;
reg    ap_ST_fsm_state31_blk;
reg    ap_ST_fsm_state32_blk;
reg    ap_ST_fsm_state33_blk;
reg    ap_ST_fsm_state34_blk;
reg    ap_ST_fsm_state35_blk;
reg    ap_ST_fsm_state36_blk;
reg    ap_ST_fsm_state37_blk;
reg    ap_ST_fsm_state38_blk;
reg    ap_ST_fsm_state39_blk;
reg    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
reg    ap_ST_fsm_state42_blk;
reg    ap_ST_fsm_state43_blk;
reg    ap_ST_fsm_state44_blk;
reg    ap_ST_fsm_state45_blk;
reg    ap_ST_fsm_state46_blk;
reg    ap_ST_fsm_state47_blk;
reg    ap_ST_fsm_state48_blk;
reg    ap_ST_fsm_state49_blk;
reg    ap_ST_fsm_state50_blk;
reg    ap_ST_fsm_state51_blk;
reg    ap_ST_fsm_state52_blk;
reg    ap_ST_fsm_state53_blk;
reg    ap_ST_fsm_state54_blk;
reg    ap_ST_fsm_state55_blk;
reg    ap_ST_fsm_state56_blk;
reg    ap_ST_fsm_state57_blk;
reg    ap_ST_fsm_state58_blk;
reg    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
reg    ap_ST_fsm_state64_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 64'd1;
#0 grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_ap_start_reg = 1'b0;
end

atax_atax_Pipeline_VITIS_LOOP_48_1 grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_ap_start),
    .ap_done(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_ap_done),
    .ap_idle(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_ap_idle),
    .ap_ready(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_ap_ready),
    .m_axi_gmem_AWVALID(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(1'b0),
    .m_axi_gmem_AWADDR(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(1'b0),
    .m_axi_gmem_WDATA(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(gmem_ARREADY),
    .m_axi_gmem_ARADDR(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(gmem_RVALID),
    .m_axi_gmem_RREADY(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(gmem_RDATA),
    .m_axi_gmem_RLAST(1'b0),
    .m_axi_gmem_RID(1'd0),
    .m_axi_gmem_RFIFONUM(gmem_RFIFONUM),
    .m_axi_gmem_RUSER(1'd0),
    .m_axi_gmem_RRESP(2'd0),
    .m_axi_gmem_BVALID(1'b0),
    .m_axi_gmem_BREADY(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .bitcast_ln60_15(bitcast_ln60_15_reg_1134),
    .bitcast_ln60_14(bitcast_ln60_14_reg_1129),
    .bitcast_ln60_13(bitcast_ln60_13_reg_1124),
    .bitcast_ln60_12(bitcast_ln60_12_reg_1119),
    .bitcast_ln60_11(bitcast_ln60_11_reg_1114),
    .bitcast_ln60_10(bitcast_ln60_10_reg_1109),
    .bitcast_ln60_9(bitcast_ln60_9_reg_1104),
    .bitcast_ln60_8(bitcast_ln60_8_reg_1099),
    .bitcast_ln60_7(bitcast_ln60_7_reg_1094),
    .bitcast_ln60_6(bitcast_ln60_6_reg_1089),
    .bitcast_ln60_5(bitcast_ln60_5_reg_1084),
    .bitcast_ln60_4(bitcast_ln60_4_reg_1079),
    .bitcast_ln60_3(bitcast_ln60_3_reg_1074),
    .bitcast_ln60_2(bitcast_ln60_2_reg_1069),
    .bitcast_ln60_1(bitcast_ln60_1_reg_1064),
    .bitcast_ln60(bitcast_ln60_reg_1059),
    .sext_ln48(trunc_ln1_reg_808),
    .empty_17(empty_48_reg_979),
    .empty_18(empty_49_reg_984),
    .empty_19(empty_50_reg_989),
    .empty_20(empty_51_reg_994),
    .empty_21(empty_52_reg_999),
    .empty_22(empty_53_reg_1004),
    .empty_23(empty_54_reg_1009),
    .empty_24(empty_55_reg_1014),
    .empty_25(empty_56_reg_1019),
    .empty_26(empty_57_reg_1024),
    .empty_27(empty_58_reg_1029),
    .empty_28(empty_59_reg_1034),
    .empty_29(empty_60_reg_1039),
    .empty_30(empty_61_reg_1044),
    .empty_31(empty_62_reg_1049),
    .empty(empty_63_reg_1054),
    .p_out(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out),
    .p_out_ap_vld(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out_ap_vld),
    .p_out1(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out1),
    .p_out1_ap_vld(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out1_ap_vld),
    .p_out2(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out2),
    .p_out2_ap_vld(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out2_ap_vld),
    .p_out3(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out3),
    .p_out3_ap_vld(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out3_ap_vld),
    .p_out4(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out4),
    .p_out4_ap_vld(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out4_ap_vld),
    .p_out5(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out5),
    .p_out5_ap_vld(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out5_ap_vld),
    .p_out6(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out6),
    .p_out6_ap_vld(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out6_ap_vld),
    .p_out7(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out7),
    .p_out7_ap_vld(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out7_ap_vld),
    .p_out8(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out8),
    .p_out8_ap_vld(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out8_ap_vld),
    .p_out9(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out9),
    .p_out9_ap_vld(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out9_ap_vld),
    .p_out10(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out10),
    .p_out10_ap_vld(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out10_ap_vld),
    .p_out11(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out11),
    .p_out11_ap_vld(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out11_ap_vld),
    .p_out12(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out12),
    .p_out12_ap_vld(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out12_ap_vld),
    .p_out13(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out13),
    .p_out13_ap_vld(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out13_ap_vld),
    .p_out14(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out14),
    .p_out14_ap_vld(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out14_ap_vld),
    .add195_out(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_add195_out),
    .add195_out_ap_vld(grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_add195_out_ap_vld)
);

atax_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .A(A),
    .x(x),
    .y(y)
);

atax_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARLEN(gmem_ARLEN),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_1_reg_786),
    .I_AWLEN(32'd16),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state41)) begin
            grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_ap_start_reg <= 1'b1;
        end else if ((grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_ap_ready == 1'b1)) begin
            grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        bitcast_ln60_10_reg_1109 <= bitcast_ln60_10_fu_532_p1;
        bitcast_ln60_11_reg_1114 <= bitcast_ln60_11_fu_536_p1;
        bitcast_ln60_12_reg_1119 <= bitcast_ln60_12_fu_540_p1;
        bitcast_ln60_13_reg_1124 <= bitcast_ln60_13_fu_544_p1;
        bitcast_ln60_14_reg_1129 <= bitcast_ln60_14_fu_548_p1;
        bitcast_ln60_15_reg_1134 <= bitcast_ln60_15_fu_552_p1;
        bitcast_ln60_1_reg_1064 <= bitcast_ln60_1_fu_496_p1;
        bitcast_ln60_2_reg_1069 <= bitcast_ln60_2_fu_500_p1;
        bitcast_ln60_3_reg_1074 <= bitcast_ln60_3_fu_504_p1;
        bitcast_ln60_4_reg_1079 <= bitcast_ln60_4_fu_508_p1;
        bitcast_ln60_5_reg_1084 <= bitcast_ln60_5_fu_512_p1;
        bitcast_ln60_6_reg_1089 <= bitcast_ln60_6_fu_516_p1;
        bitcast_ln60_7_reg_1094 <= bitcast_ln60_7_fu_520_p1;
        bitcast_ln60_8_reg_1099 <= bitcast_ln60_8_fu_524_p1;
        bitcast_ln60_9_reg_1104 <= bitcast_ln60_9_fu_528_p1;
        bitcast_ln60_reg_1059 <= bitcast_ln60_fu_492_p1;
        empty_48_reg_979 <= empty_48_fu_428_p1;
        empty_49_reg_984 <= empty_49_fu_432_p1;
        empty_50_reg_989 <= empty_50_fu_436_p1;
        empty_51_reg_994 <= empty_51_fu_440_p1;
        empty_52_reg_999 <= empty_52_fu_444_p1;
        empty_53_reg_1004 <= empty_53_fu_448_p1;
        empty_54_reg_1009 <= empty_54_fu_452_p1;
        empty_55_reg_1014 <= empty_55_fu_456_p1;
        empty_56_reg_1019 <= empty_56_fu_460_p1;
        empty_57_reg_1024 <= empty_57_fu_464_p1;
        empty_58_reg_1029 <= empty_58_fu_468_p1;
        empty_59_reg_1034 <= empty_59_fu_472_p1;
        empty_60_reg_1039 <= empty_60_fu_476_p1;
        empty_61_reg_1044 <= empty_61_fu_480_p1;
        empty_62_reg_1049 <= empty_62_fu_484_p1;
        empty_63_reg_1054 <= empty_63_fu_488_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        gmem_addr_1_read_10_reg_949 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        gmem_addr_1_read_11_reg_954 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        gmem_addr_1_read_12_reg_959 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        gmem_addr_1_read_13_reg_964 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        gmem_addr_1_read_14_reg_969 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        gmem_addr_1_read_15_reg_974 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        gmem_addr_1_read_1_reg_904 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        gmem_addr_1_read_2_reg_909 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        gmem_addr_1_read_3_reg_914 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        gmem_addr_1_read_4_reg_919 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        gmem_addr_1_read_5_reg_924 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        gmem_addr_1_read_6_reg_929 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        gmem_addr_1_read_7_reg_934 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        gmem_addr_1_read_8_reg_939 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        gmem_addr_1_read_9_reg_944 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        gmem_addr_1_read_reg_899 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        gmem_addr_1_reg_786 <= sext_ln60_fu_398_p1;
        gmem_addr_reg_780 <= p_cast_cast_fu_378_p1;
        trunc_ln1_reg_808 <= {{A[63:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        gmem_addr_read_10_reg_869 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        gmem_addr_read_11_reg_874 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        gmem_addr_read_12_reg_879 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        gmem_addr_read_13_reg_884 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        gmem_addr_read_14_reg_889 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        gmem_addr_read_15_reg_894 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        gmem_addr_read_1_reg_824 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        gmem_addr_read_2_reg_829 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gmem_addr_read_3_reg_834 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        gmem_addr_read_4_reg_839 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        gmem_addr_read_5_reg_844 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        gmem_addr_read_6_reg_849 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        gmem_addr_read_7_reg_854 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        gmem_addr_read_8_reg_859 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        gmem_addr_read_9_reg_864 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        gmem_addr_read_reg_819 <= gmem_RDATA;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state25_blk = 1'b1;
    end else begin
        ap_ST_fsm_state25_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state26_blk = 1'b1;
    end else begin
        ap_ST_fsm_state26_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state27_blk = 1'b1;
    end else begin
        ap_ST_fsm_state27_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state28_blk = 1'b1;
    end else begin
        ap_ST_fsm_state28_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state30_blk = 1'b1;
    end else begin
        ap_ST_fsm_state30_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state31_blk = 1'b1;
    end else begin
        ap_ST_fsm_state31_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state32_blk = 1'b1;
    end else begin
        ap_ST_fsm_state32_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state33_blk = 1'b1;
    end else begin
        ap_ST_fsm_state33_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state34_blk = 1'b1;
    end else begin
        ap_ST_fsm_state34_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state35_blk = 1'b1;
    end else begin
        ap_ST_fsm_state35_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state36_blk = 1'b1;
    end else begin
        ap_ST_fsm_state36_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state37_blk = 1'b1;
    end else begin
        ap_ST_fsm_state37_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state38_blk = 1'b1;
    end else begin
        ap_ST_fsm_state38_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state39_blk = 1'b1;
    end else begin
        ap_ST_fsm_state39_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state40_blk = 1'b1;
    end else begin
        ap_ST_fsm_state40_blk = 1'b0;
    end
end

assign ap_ST_fsm_state41_blk = 1'b0;

always @ (*) begin
    if ((grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_ap_done == 1'b0)) begin
        ap_ST_fsm_state42_blk = 1'b1;
    end else begin
        ap_ST_fsm_state42_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state43_blk = 1'b1;
    end else begin
        ap_ST_fsm_state43_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state44_blk = 1'b1;
    end else begin
        ap_ST_fsm_state44_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state45_blk = 1'b1;
    end else begin
        ap_ST_fsm_state45_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state46_blk = 1'b1;
    end else begin
        ap_ST_fsm_state46_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state47_blk = 1'b1;
    end else begin
        ap_ST_fsm_state47_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state48_blk = 1'b1;
    end else begin
        ap_ST_fsm_state48_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state49_blk = 1'b1;
    end else begin
        ap_ST_fsm_state49_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state50_blk = 1'b1;
    end else begin
        ap_ST_fsm_state50_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state51_blk = 1'b1;
    end else begin
        ap_ST_fsm_state51_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state52_blk = 1'b1;
    end else begin
        ap_ST_fsm_state52_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state53_blk = 1'b1;
    end else begin
        ap_ST_fsm_state53_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state54_blk = 1'b1;
    end else begin
        ap_ST_fsm_state54_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state55_blk = 1'b1;
    end else begin
        ap_ST_fsm_state55_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state56_blk = 1'b1;
    end else begin
        ap_ST_fsm_state56_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state57_blk = 1'b1;
    end else begin
        ap_ST_fsm_state57_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state58_blk = 1'b1;
    end else begin
        ap_ST_fsm_state58_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state59_blk = 1'b1;
    end else begin
        ap_ST_fsm_state59_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

always @ (*) begin
    if ((gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state64_blk = 1'b1;
    end else begin
        ap_ST_fsm_state64_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARADDR = sext_ln48_fu_418_p1;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        gmem_ARADDR = gmem_addr_1_reg_786;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARADDR = gmem_addr_reg_780;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_ARADDR = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARADDR;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_ARLEN = 32'd256;
    end else if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_ARLEN = 32'd16;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_ARLEN = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARLEN;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_ARVALID = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_ARVALID;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state40)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        gmem_RREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_RREADY = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_m_axi_gmem_RREADY;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        gmem_WDATA = bitcast_ln64_15_fu_679_p1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        gmem_WDATA = bitcast_ln64_14_fu_671_p1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        gmem_WDATA = bitcast_ln64_13_fu_663_p1;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        gmem_WDATA = bitcast_ln64_12_fu_655_p1;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        gmem_WDATA = bitcast_ln64_11_fu_647_p1;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        gmem_WDATA = bitcast_ln64_10_fu_639_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        gmem_WDATA = bitcast_ln64_9_fu_631_p1;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        gmem_WDATA = bitcast_ln64_8_fu_623_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        gmem_WDATA = bitcast_ln64_7_fu_615_p1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        gmem_WDATA = bitcast_ln64_6_fu_607_p1;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        gmem_WDATA = bitcast_ln64_5_fu_599_p1;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        gmem_WDATA = bitcast_ln64_4_fu_591_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        gmem_WDATA = bitcast_ln64_3_fu_583_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        gmem_WDATA = bitcast_ln64_2_fu_575_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        gmem_WDATA = bitcast_ln64_1_fu_567_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        gmem_WDATA = bitcast_ln64_fu_559_p1;
    end else begin
        gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state58)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state57)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state56)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state55)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state54)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state53)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state52)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state51)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state50)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state49)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state48)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state47)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state46)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state45)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44)))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln60_10_fu_532_p1 = gmem_addr_1_read_10_reg_949;

assign bitcast_ln60_11_fu_536_p1 = gmem_addr_1_read_11_reg_954;

assign bitcast_ln60_12_fu_540_p1 = gmem_addr_1_read_12_reg_959;

assign bitcast_ln60_13_fu_544_p1 = gmem_addr_1_read_13_reg_964;

assign bitcast_ln60_14_fu_548_p1 = gmem_addr_1_read_14_reg_969;

assign bitcast_ln60_15_fu_552_p1 = gmem_addr_1_read_15_reg_974;

assign bitcast_ln60_1_fu_496_p1 = gmem_addr_1_read_1_reg_904;

assign bitcast_ln60_2_fu_500_p1 = gmem_addr_1_read_2_reg_909;

assign bitcast_ln60_3_fu_504_p1 = gmem_addr_1_read_3_reg_914;

assign bitcast_ln60_4_fu_508_p1 = gmem_addr_1_read_4_reg_919;

assign bitcast_ln60_5_fu_512_p1 = gmem_addr_1_read_5_reg_924;

assign bitcast_ln60_6_fu_516_p1 = gmem_addr_1_read_6_reg_929;

assign bitcast_ln60_7_fu_520_p1 = gmem_addr_1_read_7_reg_934;

assign bitcast_ln60_8_fu_524_p1 = gmem_addr_1_read_8_reg_939;

assign bitcast_ln60_9_fu_528_p1 = gmem_addr_1_read_9_reg_944;

assign bitcast_ln60_fu_492_p1 = gmem_addr_1_read_reg_899;

assign bitcast_ln64_10_fu_639_p1 = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out5;

assign bitcast_ln64_11_fu_647_p1 = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out4;

assign bitcast_ln64_12_fu_655_p1 = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out3;

assign bitcast_ln64_13_fu_663_p1 = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out2;

assign bitcast_ln64_14_fu_671_p1 = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out1;

assign bitcast_ln64_15_fu_679_p1 = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out;

assign bitcast_ln64_1_fu_567_p1 = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out14;

assign bitcast_ln64_2_fu_575_p1 = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out13;

assign bitcast_ln64_3_fu_583_p1 = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out12;

assign bitcast_ln64_4_fu_591_p1 = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out11;

assign bitcast_ln64_5_fu_599_p1 = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out10;

assign bitcast_ln64_6_fu_607_p1 = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out9;

assign bitcast_ln64_7_fu_615_p1 = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out8;

assign bitcast_ln64_8_fu_623_p1 = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out7;

assign bitcast_ln64_9_fu_631_p1 = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_p_out6;

assign bitcast_ln64_fu_559_p1 = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_add195_out;

assign empty_48_fu_428_p1 = gmem_addr_read_reg_819;

assign empty_49_fu_432_p1 = gmem_addr_read_1_reg_824;

assign empty_50_fu_436_p1 = gmem_addr_read_2_reg_829;

assign empty_51_fu_440_p1 = gmem_addr_read_3_reg_834;

assign empty_52_fu_444_p1 = gmem_addr_read_4_reg_839;

assign empty_53_fu_448_p1 = gmem_addr_read_5_reg_844;

assign empty_54_fu_452_p1 = gmem_addr_read_6_reg_849;

assign empty_55_fu_456_p1 = gmem_addr_read_7_reg_854;

assign empty_56_fu_460_p1 = gmem_addr_read_8_reg_859;

assign empty_57_fu_464_p1 = gmem_addr_read_9_reg_864;

assign empty_58_fu_468_p1 = gmem_addr_read_10_reg_869;

assign empty_59_fu_472_p1 = gmem_addr_read_11_reg_874;

assign empty_60_fu_476_p1 = gmem_addr_read_12_reg_879;

assign empty_61_fu_480_p1 = gmem_addr_read_13_reg_884;

assign empty_62_fu_484_p1 = gmem_addr_read_14_reg_889;

assign empty_63_fu_488_p1 = gmem_addr_read_15_reg_894;

assign grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_ap_start = grp_atax_Pipeline_VITIS_LOOP_48_1_fu_313_ap_start_reg;

assign p_cast_cast_fu_378_p1 = $signed(p_cast_fu_368_p4);

assign p_cast_fu_368_p4 = {{x[63:2]}};

assign sext_ln48_fu_418_p1 = $signed(trunc_ln1_reg_808);

assign sext_ln60_fu_398_p1 = $signed(trunc_ln_fu_388_p4);

assign trunc_ln_fu_388_p4 = {{y[63:2]}};

endmodule //atax
