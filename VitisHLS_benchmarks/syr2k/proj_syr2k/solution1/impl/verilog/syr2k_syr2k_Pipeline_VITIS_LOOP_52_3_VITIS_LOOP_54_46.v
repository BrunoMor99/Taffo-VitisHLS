// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module syr2k_syr2k_Pipeline_VITIS_LOOP_52_3_VITIS_LOOP_54_46 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        tmp_15,
        B,
        A,
        bound288,
        indvars_iv73,
        p_cast21,
        C
);

parameter    ap_ST_fsm_pp0_stage0 = 19'd1;
parameter    ap_ST_fsm_pp0_stage1 = 19'd2;
parameter    ap_ST_fsm_pp0_stage2 = 19'd4;
parameter    ap_ST_fsm_pp0_stage3 = 19'd8;
parameter    ap_ST_fsm_pp0_stage4 = 19'd16;
parameter    ap_ST_fsm_pp0_stage5 = 19'd32;
parameter    ap_ST_fsm_pp0_stage6 = 19'd64;
parameter    ap_ST_fsm_pp0_stage7 = 19'd128;
parameter    ap_ST_fsm_pp0_stage8 = 19'd256;
parameter    ap_ST_fsm_pp0_stage9 = 19'd512;
parameter    ap_ST_fsm_pp0_stage10 = 19'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 19'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 19'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 19'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 19'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 19'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 19'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 19'd131072;
parameter    ap_ST_fsm_pp0_stage18 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [3:0] tmp_15;
input  [63:0] B;
input  [63:0] A;
input  [8:0] bound288;
input  [4:0] indvars_iv73;
input  [31:0] p_cast21;
input  [63:0] C;

reg ap_idle;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state20_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] exitcond_flatten307_fu_307_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_state19_pp0_stage18_iter0;
wire    ap_block_pp0_stage18_subdone;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond_flatten307_reg_713;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_pp0_stage14;
reg    gmem_blk_n_B;
wire    ap_block_pp0_stage0;
wire   [44:0] p_cast21_cast_fu_232_p1;
reg   [44:0] p_cast21_cast_reg_707;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] gmem_addr_reg_717;
reg   [63:0] gmem_addr_1_reg_723;
reg   [63:0] gmem_addr_2_reg_729;
reg   [63:0] gmem_addr_3_reg_735;
reg   [63:0] gmem_addr_4_reg_741;
reg  signed [31:0] gmem_addr_read_reg_748;
reg    ap_block_state9_pp0_stage8_iter0;
reg    ap_block_pp0_stage8_11001;
reg  signed [31:0] gmem_addr_1_read_reg_753;
reg    ap_block_state10_pp0_stage9_iter0;
reg    ap_block_pp0_stage9_11001;
reg  signed [31:0] gmem_addr_2_read_reg_758;
reg    ap_block_state11_pp0_stage10_iter0;
reg    ap_block_pp0_stage10_11001;
reg   [31:0] mul28_u0_32fixp_3_reg_763;
reg    ap_block_state12_pp0_stage11_iter0;
reg    ap_block_pp0_stage11_11001;
reg  signed [31:0] gmem_addr_3_read_reg_768;
reg   [31:0] mul38_u0_32fixp_3_reg_773;
reg    ap_block_state13_pp0_stage12_iter0;
reg    ap_block_pp0_stage12_11001;
reg   [31:0] gmem_addr_4_read_reg_778;
reg   [15:0] tmp_6_reg_783;
wire    ap_block_state14_pp0_stage13_iter0;
reg    ap_block_state14_io;
reg    ap_block_pp0_stage13_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire  signed [63:0] gmem_load_19_cast_mid2_v_fu_398_p1;
wire  signed [63:0] gmem_load_20_cast_mid2_v_fu_426_p1;
wire  signed [63:0] p_cast73_cast_fu_478_p1;
wire  signed [63:0] p_cast76_cast_fu_504_p1;
wire  signed [63:0] p_cast81_cast_fu_544_p1;
wire    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage1_11001;
wire    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage2_11001;
wire    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage3_11001;
wire    ap_block_state5_pp0_stage4_iter0;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage4_11001;
wire    ap_block_state6_pp0_stage5_iter0;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage5_11001;
wire    ap_block_state15_pp0_stage14_iter0;
reg    ap_block_state15_io;
reg    ap_block_pp0_stage14_11001;
wire    ap_block_pp0_stage14_01001;
reg   [4:0] indvars_iv62_fu_108;
wire   [4:0] indvars_iv_next63_fu_554_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_indvars_iv62_load;
reg   [4:0] indvars_iv69_fu_112;
wire   [4:0] indvars_iv69_mid2_fu_436_p3;
reg   [4:0] ap_sig_allocacmp_indvars_iv69_load;
reg   [8:0] indvar_flatten305_fu_116;
wire   [8:0] indvar_flatten_next306_fu_313_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten305_load;
wire   [3:0] empty_fu_257_p1;
wire   [9:0] tmp_s_fu_261_p4;
wire   [63:0] p_cast95_fu_271_p1;
wire   [63:0] empty_24_fu_275_p2;
wire   [63:0] empty_25_fu_281_p2;
wire   [0:0] exitcond6811327_fu_322_p2;
wire   [4:0] indvars_iv_next70_dup321_fu_336_p2;
wire   [3:0] empty_27_fu_342_p1;
wire   [9:0] tmp_1_fu_354_p4;
wire   [63:0] p_cast95_mid1_fu_364_p1;
wire   [63:0] p_mid1297_fu_368_p2;
wire   [61:0] p_cast69_mid1_fu_380_p4;
wire   [61:0] p_cast_fu_287_p4;
wire   [61:0] empty_28_fu_390_p3;
wire   [63:0] p_mid1299_fu_374_p2;
wire   [61:0] p_cast70_mid1_fu_408_p4;
wire   [61:0] p_cast1_fu_297_p4;
wire   [61:0] empty_29_fu_418_p3;
wire   [4:0] indvars_iv62_mid2_fu_328_p3;
wire   [3:0] empty_30_fu_444_p1;
wire   [3:0] indvars_iv69_cast_mid2_fu_346_p3;
wire   [9:0] tmp_2_fu_448_p4;
wire   [63:0] p_cast96_fu_458_p1;
wire   [63:0] empty_31_fu_462_p2;
wire   [61:0] p_cast2_fu_468_p4;
wire   [63:0] empty_34_fu_488_p2;
wire   [61:0] p_cast3_fu_494_p4;
wire   [9:0] tmp_5_fu_514_p4;
wire   [63:0] p_cast97_fu_524_p1;
wire   [63:0] empty_37_fu_528_p2;
wire   [61:0] p_cast4_fu_534_p4;
wire   [31:0] empty_32_fu_581_p1;
wire   [44:0] empty_32_fu_581_p2;
wire   [31:0] tmp_3_fu_586_p4;
wire   [31:0] empty_33_fu_600_p0;
wire   [47:0] empty_33_fu_600_p2;
wire   [31:0] empty_35_fu_622_p1;
wire   [44:0] empty_35_fu_622_p2;
wire   [31:0] tmp_4_fu_627_p4;
wire   [31:0] empty_36_fu_641_p0;
wire   [47:0] empty_36_fu_641_p2;
wire   [31:0] empty_38_fu_657_p2;
wire   [31:0] tmp4_fu_662_p2;
wire   [31:0] add44_u0_32fixp_3_fu_667_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [18:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage8_subdone;
reg    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage10_subdone;
reg    ap_block_pp0_stage11_subdone;
reg    ap_block_pp0_stage12_subdone;
reg    ap_block_pp0_stage13_subdone;
reg    ap_block_pp0_stage14_subdone;
wire    ap_block_state16_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_state17_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_state18_pp0_stage17_iter0;
wire    ap_block_pp0_stage17_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [47:0] empty_33_fu_600_p00;
wire   [47:0] empty_36_fu_641_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

syr2k_mul_32s_32ns_45_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 45 ))
mul_32s_32ns_45_1_1_U63(
    .din0(gmem_addr_2_read_reg_758),
    .din1(empty_32_fu_581_p1),
    .dout(empty_32_fu_581_p2)
);

syr2k_mul_32ns_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32ns_32s_48_1_1_U64(
    .din0(empty_33_fu_600_p0),
    .din1(gmem_addr_read_reg_748),
    .dout(empty_33_fu_600_p2)
);

syr2k_mul_32s_32ns_45_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 45 ))
mul_32s_32ns_45_1_1_U65(
    .din0(gmem_addr_3_read_reg_768),
    .din1(empty_35_fu_622_p1),
    .dout(empty_35_fu_622_p2)
);

syr2k_mul_32ns_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32ns_32s_48_1_1_U66(
    .din0(empty_36_fu_641_p0),
    .din1(gmem_addr_1_read_reg_753),
    .dout(empty_36_fu_641_p2)
);

syr2k_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten307_fu_307_p2 == 1'd0))) begin
            indvar_flatten305_fu_116 <= indvar_flatten_next306_fu_313_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten305_fu_116 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten307_fu_307_p2 == 1'd0))) begin
            indvars_iv62_fu_108 <= indvars_iv_next63_fu_554_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvars_iv62_fu_108 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten307_fu_307_p2 == 1'd0))) begin
            indvars_iv69_fu_112 <= indvars_iv69_mid2_fu_436_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvars_iv69_fu_112 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten307_reg_713 <= exitcond_flatten307_fu_307_p2;
        p_cast21_cast_reg_707[31 : 0] <= p_cast21_cast_fu_232_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001))) begin
        gmem_addr_1_read_reg_753 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten307_fu_307_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_1_reg_723 <= gmem_load_20_cast_mid2_v_fu_426_p1;
        gmem_addr_2_reg_729 <= p_cast73_cast_fu_478_p1;
        gmem_addr_3_reg_735 <= p_cast76_cast_fu_504_p1;
        gmem_addr_4_reg_741 <= p_cast81_cast_fu_544_p1;
        gmem_addr_reg_717 <= gmem_load_19_cast_mid2_v_fu_398_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001))) begin
        gmem_addr_2_read_reg_758 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage11) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001))) begin
        gmem_addr_3_read_reg_768 <= m_axi_gmem_RDATA;
        mul28_u0_32fixp_3_reg_763 <= {{empty_33_fu_600_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage12) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001))) begin
        gmem_addr_4_read_reg_778 <= m_axi_gmem_RDATA;
        mul38_u0_32fixp_3_reg_773 <= {{empty_36_fu_641_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001))) begin
        gmem_addr_read_reg_748 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage13) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001))) begin
        tmp_6_reg_783 <= {{add44_u0_32fixp_3_fu_667_p2[31:16]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten307_fu_307_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten305_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten305_load = indvar_flatten305_fu_116;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvars_iv62_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvars_iv62_load = indvars_iv62_fu_108;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvars_iv69_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvars_iv69_load = indvars_iv69_fu_112;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage5)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage4)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage13))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage12)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage11)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage10)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage9)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage8)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage14))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten307_reg_713 == 1'd0))) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
            m_axi_gmem_ARADDR = gmem_addr_4_reg_741;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
            m_axi_gmem_ARADDR = gmem_addr_3_reg_735;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
            m_axi_gmem_ARADDR = gmem_addr_2_reg_729;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
            m_axi_gmem_ARADDR = gmem_addr_1_reg_723;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
            m_axi_gmem_ARADDR = gmem_addr_reg_717;
        end else begin
            m_axi_gmem_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (exitcond_flatten307_reg_713 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add44_u0_32fixp_3_fu_667_p2 = (tmp4_fu_662_p2 + mul28_u0_32fixp_3_reg_763);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten307_reg_713 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten307_reg_713 == 1'd0));
end

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_11001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten307_reg_713 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage11_subdone = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten307_reg_713 == 1'd0));
end

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_11001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten307_reg_713 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten307_reg_713 == 1'd0));
end

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage13_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state14_io));
end

always @ (*) begin
    ap_block_pp0_stage13_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state14_io));
end

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage14_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state15_io));
end

always @ (*) begin
    ap_block_pp0_stage14_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state15_io));
end

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state5_io));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state5_io));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state6_io));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state6_io));
end

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten307_reg_713 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten307_reg_713 == 1'd0));
end

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten307_reg_713 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten307_reg_713 == 1'd0));
end

always @ (*) begin
    ap_block_state10_pp0_stage9_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (exitcond_flatten307_reg_713 == 1'd0));
end

always @ (*) begin
    ap_block_state11_pp0_stage10_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (exitcond_flatten307_reg_713 == 1'd0));
end

always @ (*) begin
    ap_block_state12_pp0_stage11_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (exitcond_flatten307_reg_713 == 1'd0));
end

always @ (*) begin
    ap_block_state13_pp0_stage12_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (exitcond_flatten307_reg_713 == 1'd0));
end

always @ (*) begin
    ap_block_state14_io = ((m_axi_gmem_AWREADY == 1'b0) & (exitcond_flatten307_reg_713 == 1'd0));
end

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = ((m_axi_gmem_WREADY == 1'b0) & (exitcond_flatten307_reg_713 == 1'd0));
end

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp0_stage0_iter1 = (m_axi_gmem_BVALID == 1'b0);
end

always @ (*) begin
    ap_block_state2_io = ((m_axi_gmem_ARREADY == 1'b0) & (exitcond_flatten307_reg_713 == 1'd0));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_gmem_ARREADY == 1'b0) & (exitcond_flatten307_reg_713 == 1'd0));
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((m_axi_gmem_ARREADY == 1'b0) & (exitcond_flatten307_reg_713 == 1'd0));
end

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((m_axi_gmem_ARREADY == 1'b0) & (exitcond_flatten307_reg_713 == 1'd0));
end

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((m_axi_gmem_ARREADY == 1'b0) & (exitcond_flatten307_reg_713 == 1'd0));
end

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage8_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (exitcond_flatten307_reg_713 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_24_fu_275_p2 = (p_cast95_fu_271_p1 + B);

assign empty_25_fu_281_p2 = (p_cast95_fu_271_p1 + A);

assign empty_27_fu_342_p1 = indvars_iv_next70_dup321_fu_336_p2[3:0];

assign empty_28_fu_390_p3 = ((exitcond6811327_fu_322_p2[0:0] == 1'b1) ? p_cast69_mid1_fu_380_p4 : p_cast_fu_287_p4);

assign empty_29_fu_418_p3 = ((exitcond6811327_fu_322_p2[0:0] == 1'b1) ? p_cast70_mid1_fu_408_p4 : p_cast1_fu_297_p4);

assign empty_30_fu_444_p1 = indvars_iv62_mid2_fu_328_p3[3:0];

assign empty_31_fu_462_p2 = (p_cast96_fu_458_p1 + A);

assign empty_32_fu_581_p1 = p_cast21_cast_reg_707;

assign empty_33_fu_600_p0 = empty_33_fu_600_p00;

assign empty_33_fu_600_p00 = tmp_3_fu_586_p4;

assign empty_34_fu_488_p2 = (p_cast96_fu_458_p1 + B);

assign empty_35_fu_622_p1 = p_cast21_cast_reg_707;

assign empty_36_fu_641_p0 = empty_36_fu_641_p00;

assign empty_36_fu_641_p00 = tmp_4_fu_627_p4;

assign empty_37_fu_528_p2 = (p_cast97_fu_524_p1 + C);

assign empty_38_fu_657_p2 = gmem_addr_4_read_reg_778 << 32'd16;

assign empty_fu_257_p1 = ap_sig_allocacmp_indvars_iv69_load[3:0];

assign exitcond6811327_fu_322_p2 = ((ap_sig_allocacmp_indvars_iv62_load == indvars_iv73) ? 1'b1 : 1'b0);

assign exitcond_flatten307_fu_307_p2 = ((ap_sig_allocacmp_indvar_flatten305_load == bound288) ? 1'b1 : 1'b0);

assign gmem_load_19_cast_mid2_v_fu_398_p1 = $signed(empty_28_fu_390_p3);

assign gmem_load_20_cast_mid2_v_fu_426_p1 = $signed(empty_29_fu_418_p3);

assign indvar_flatten_next306_fu_313_p2 = (ap_sig_allocacmp_indvar_flatten305_load + 9'd1);

assign indvars_iv62_mid2_fu_328_p3 = ((exitcond6811327_fu_322_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_indvars_iv62_load);

assign indvars_iv69_cast_mid2_fu_346_p3 = ((exitcond6811327_fu_322_p2[0:0] == 1'b1) ? empty_27_fu_342_p1 : empty_fu_257_p1);

assign indvars_iv69_mid2_fu_436_p3 = ((exitcond6811327_fu_322_p2[0:0] == 1'b1) ? indvars_iv_next70_dup321_fu_336_p2 : ap_sig_allocacmp_indvars_iv69_load);

assign indvars_iv_next63_fu_554_p2 = (indvars_iv62_mid2_fu_328_p3 + 5'd1);

assign indvars_iv_next70_dup321_fu_336_p2 = (ap_sig_allocacmp_indvars_iv69_load + 5'd1);

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = gmem_addr_4_reg_741;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = tmp_6_reg_783;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign p_cast1_fu_297_p4 = {{empty_25_fu_281_p2[63:2]}};

assign p_cast21_cast_fu_232_p1 = p_cast21;

assign p_cast2_fu_468_p4 = {{empty_31_fu_462_p2[63:2]}};

assign p_cast3_fu_494_p4 = {{empty_34_fu_488_p2[63:2]}};

assign p_cast4_fu_534_p4 = {{empty_37_fu_528_p2[63:2]}};

assign p_cast69_mid1_fu_380_p4 = {{p_mid1297_fu_368_p2[63:2]}};

assign p_cast70_mid1_fu_408_p4 = {{p_mid1299_fu_374_p2[63:2]}};

assign p_cast73_cast_fu_478_p1 = $signed(p_cast2_fu_468_p4);

assign p_cast76_cast_fu_504_p1 = $signed(p_cast3_fu_494_p4);

assign p_cast81_cast_fu_544_p1 = $signed(p_cast4_fu_534_p4);

assign p_cast95_fu_271_p1 = tmp_s_fu_261_p4;

assign p_cast95_mid1_fu_364_p1 = tmp_1_fu_354_p4;

assign p_cast96_fu_458_p1 = tmp_2_fu_448_p4;

assign p_cast97_fu_524_p1 = tmp_5_fu_514_p4;

assign p_cast_fu_287_p4 = {{empty_24_fu_275_p2[63:2]}};

assign p_mid1297_fu_368_p2 = (p_cast95_mid1_fu_364_p1 + B);

assign p_mid1299_fu_374_p2 = (p_cast95_mid1_fu_364_p1 + A);

assign tmp4_fu_662_p2 = (empty_38_fu_657_p2 + mul38_u0_32fixp_3_reg_773);

assign tmp_1_fu_354_p4 = {{{tmp_15}, {empty_27_fu_342_p1}}, {2'd0}};

assign tmp_2_fu_448_p4 = {{{empty_30_fu_444_p1}, {indvars_iv69_cast_mid2_fu_346_p3}}, {2'd0}};

assign tmp_3_fu_586_p4 = {{empty_32_fu_581_p2[44:13]}};

assign tmp_4_fu_627_p4 = {{empty_35_fu_622_p2[44:13]}};

assign tmp_5_fu_514_p4 = {{{tmp_15}, {empty_30_fu_444_p1}}, {2'd0}};

assign tmp_s_fu_261_p4 = {{{tmp_15}, {empty_fu_257_p1}}, {2'd0}};

always @ (posedge ap_clk) begin
    p_cast21_cast_reg_707[44:32] <= 13'b0000000000000;
end

endmodule //syr2k_syr2k_Pipeline_VITIS_LOOP_52_3_VITIS_LOOP_54_46
