// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module array_copy_array_copy_Pipeline_VITIS_LOOP_49_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vla_u3_29fixp1_address0,
        vla_u3_29fixp1_ce0,
        vla_u3_29fixp1_q0,
        ys_u5_27fixp_address0,
        ys_u5_27fixp_ce0,
        ys_u5_27fixp_we0,
        ys_u5_27fixp_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] vla_u3_29fixp1_address0;
output   vla_u3_29fixp1_ce0;
input  [31:0] vla_u3_29fixp1_q0;
output  [3:0] ys_u5_27fixp_address0;
output   ys_u5_27fixp_ce0;
output   ys_u5_27fixp_we0;
output  [27:0] ys_u5_27fixp_d0;

reg ap_idle;
reg vla_u3_29fixp1_ce0;
reg ys_u5_27fixp_ce0;
reg ys_u5_27fixp_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] exitcond102_fu_74_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] indvars_iv8_cast_fu_86_p1;
reg   [63:0] indvars_iv8_cast_reg_127;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [4:0] indvars_iv8_fu_36;
wire   [4:0] indvars_iv_next9_fu_80_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_indvars_iv8_load;
wire   [31:0] empty_17_fu_100_p0;
wire   [58:0] vla_u3_29fixp1_load_cast_fu_96_p1;
wire   [31:0] empty_17_fu_100_p1;
wire   [58:0] empty_17_fu_100_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

array_copy_mul_32ns_32ns_59_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 59 ))
mul_32ns_32ns_59_1_1_U10(
    .din0(empty_17_fu_100_p0),
    .din1(empty_17_fu_100_p1),
    .dout(empty_17_fu_100_p2)
);

array_copy_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((exitcond102_fu_74_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvars_iv8_fu_36 <= indvars_iv_next9_fu_80_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvars_iv8_fu_36 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond102_fu_74_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvars_iv8_cast_reg_127[4 : 0] <= indvars_iv8_cast_fu_86_p1[4 : 0];
    end
end

always @ (*) begin
    if (((exitcond102_fu_74_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvars_iv8_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvars_iv8_load = indvars_iv8_fu_36;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vla_u3_29fixp1_ce0 = 1'b1;
    end else begin
        vla_u3_29fixp1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ys_u5_27fixp_ce0 = 1'b1;
    end else begin
        ys_u5_27fixp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ys_u5_27fixp_we0 = 1'b1;
    end else begin
        ys_u5_27fixp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_17_fu_100_p0 = vla_u3_29fixp1_load_cast_fu_96_p1;

assign empty_17_fu_100_p1 = vla_u3_29fixp1_load_cast_fu_96_p1;

assign exitcond102_fu_74_p2 = ((ap_sig_allocacmp_indvars_iv8_load == 5'd16) ? 1'b1 : 1'b0);

assign indvars_iv8_cast_fu_86_p1 = ap_sig_allocacmp_indvars_iv8_load;

assign indvars_iv_next9_fu_80_p2 = (ap_sig_allocacmp_indvars_iv8_load + 5'd1);

assign vla_u3_29fixp1_address0 = indvars_iv8_cast_fu_86_p1;

assign vla_u3_29fixp1_load_cast_fu_96_p1 = vla_u3_29fixp1_q0;

assign ys_u5_27fixp_address0 = indvars_iv8_cast_reg_127;

assign ys_u5_27fixp_d0 = {{empty_17_fu_100_p2[58:31]}};

always @ (posedge ap_clk) begin
    indvars_iv8_cast_reg_127[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //array_copy_array_copy_Pipeline_VITIS_LOOP_49_2
